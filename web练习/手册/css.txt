******************************************
				    第一天
1、回顾
   1、表单
      1、表单元素
         1、作用
	    显示，收集 ， 并提交用户数据到服务器
	 2、语法
	    1、标记
	       <form></form>
	    2、属性
	       1、id
	       2、name
	       3、action  
	          提交地址
	       4、method
	          取值：
		    get ：明文，2KB限制
		    post ：密文，无限制
	       5、enctype
	          取值:
		  1、application/x-www-form-urlencoded
		  2、multipart/form-data
		  3、text/plain
      2、表单控件元素
         1、input 类型
	    1、属性
	       1、type ：类型
	       2、name ：控件名称(服务器用)
	       3、value : 控件值(服务器用)
	       4、disabled ：禁用控件
	    2、文本框与密码框
	       1、文本框
	          type="text"
	       2、密码框
	          type="password"
	       3、属性
	          1、maxlength：限制输入的字符数
		  2、readonly
	    3、单选按钮 和 复选框
	        1、单选按钮
	          type="radio"
		2、复选框
		  type="checkbox"
		3、属性
		  1、name
		     除名称之外，还表示分组。一组的单选按钮或复选框必须使用相同的名称。
		  2、checked : 预选中
	    4、按钮
	       1、提交按钮
	          type="submit"
	       2、重置按钮
	          type="reset"
	       3、普通按钮
	          type="button"
	    5、隐藏域和文件选择框
	       1、隐藏域
	          type="hidden"
	       2、文件选择框
	          type="file"

		  注意：
		    1、method必须为post
		    2、enctype必须为 multipart/form-data
	 2、选项框
	    1、分类
	       1、下拉选项框
	       2、滚动列表
	    2、语法
	       1、<select></select>
	          属性：
		    1、name ：名称
		    2、size ：显示选项数量，大于1，则为滚动列表
		    3、multiple : 多选
	       2、<option></option>
	          属性：
		    1、value ：值
		    2、selected ：预选中
	 3、多行文本域
	    1、语法
	       <textarea></textarea>
	    2、属性
	       1、name
	       2、readonly
	       3、cols
	          一行显示的字符数
	       4、rows
	          默认显示多少行
	 4、其他
	    1、<label>
	       1、作用
	          关联表单控件和文本
	       2、语法
	          <label>文本</label>
	       3、属性
	          1、for
		     与其关联表单控件的 ID 值
	    2、<fieldset>
	       1、作用
	          为控件分组
	       2、语法
	          1、分组
	            <fieldset></fieldset>
		  2、分组中的标题
		    <legend></legend>
   2、其他标记
      1、浮动框架
         1、作用
	    在一个网页中嵌入另外一个网页
	 2、语法
	    <iframe></iframe>
	 3、属性
	    1、src
	       引入网页的url
	    2、width
	    3、height
	    4、frameborder
	       浮动框架边框，设置为0，则不显示
      2、摘要与细节
         1、作用
	    完成 展开与收缩的效果
	 2、语法
	    <details></details> --定义细节
	    <summary></summary> --定义标题
      3、度量元素
         1、语法
	    <meter></meter>
	 2、属性
	    1、min
	       度量范围最小值
	       默认为0
	    2、max
	       度量范围最大值
	       默认为1
	    3、value
	       显示的值
	       默认为0
      4、时间元素
         1、作用
	    关联时间的不同表现形式
	 2、语法
	    <time>文本</time>
	 3、属性
	    1、datetime
	       关联的日期与时间，中间用T分割
      5、高亮显示
         <mark></mark>
      6、按钮
         <button>显示的文本</button>
*************************************
CSS 
1、CSS概述
   1、问题
      1、控制一个页面中所有的文本颜色为红色
         <body text="red">
      2、控制页面中所有的div的颜色为蓝色
      3、将 div 的颜色 由蓝色变为绿色

      总结：（不足）
        1、相同的操作要使用不同的属性来完成
	2、可重用行 和 可维护性 不高
   2、什么是CSS
      CSS(Cascading Style Sheets),层叠样式表,也称为级联样式表,样式表

      1、作用
         控制页面元素的样式

	 提高代码的可重用性和可维护性
	 能够使表现(html)与样式(css)相分离
      2、html 与 css
         1、关系
	    1、HTML负责搭建网页结构
	    2、CSS用于构建元素样式
	 2、使用原则
	    W3C规范尽量使用CSS样式取代HTML属性

	    能够取代的属性：
	      body ：text
	      font ：color
	      可以被 CSS
	      color 取代

	      align 可以被 text-align取代
	    无法取代属性：
	      colspan,rowspan
	      只能使用 html 属性完成
      3、使用CSS样式表
         1、css样式表的使用方式
	   1、内联方式
	      也称为：行内样式
	      将样式定义在html元素中
	      语法：
	        1、将样式定义在元素的 style 属性中
		  <p style=""></p>
		2、style后允许出现若干 样式声明
		  样式声明：
		    属性名称:值;

		 常用属性及值
		 1、color 属性
		    作用：文本颜色
		    取值：颜色的英文名称
		    color:red;
		 2、background-color 属性
		    作用：背景颜色
		    取值：同上
		 3、font-size
		    作用：文字大小
		    取值：以 px 为单位的数值
		    font-size:12px;
           2、内部样式表
	      将样式定义在html头<head></head>元素中
	      特点：当前页面中可以随意去使用声明好的样式

	      语法：
	        <head>
		  <style>
			样式规则
		  </style>
		</head>
		注意：在style标记中，允许包含若干 样式规则
		样式规则由 选择器 和 样式声明 组成

		选择器：规范 页面中哪些元素能够使用定义好的样式

		元素选择器:由标签名称作为选择器，规范当前标记的样式。

		选择器{
		  样式声明1;
		  样式声明2;
		}
           3、外部样式表
	      1、特点
	         使用 样式文件(*.css)保存所有的样式规则
	      2、使用步骤
	         1、创建样式表文件保存样式规则
		 2、在网页中引入样式表文件
		    <head>
		     <link rel="stylesheet" href="css文件url">
		    </head>
      4、练习
         1、使用内联方式设置<p>样式
	    文本颜色：红色(red)
	    文字大小：18px
	 2、使用内部样式表设置<h1>样式
	    文本颜色：蓝色(blue)
	    文字大小：12px
	 3、使用外部样式表设置<h2>样式
	    背景颜色：灰色(gray)
	    文本颜色：绿色(green)
	    文字大小：12px
      5、调试
         1、Unknown property name
	    样式属性名写错了
	 2、Invalid property value
	    未验证的属性值
	    值写错了
      6、CSS样式表特征
         1、继承性
	    大部分样式属性可以被继承
	 2、层叠性
	    为一个元素定义多个选择器
	    当样式声明不冲突时，那么久可以将多个样式声明合并成一个
	 3、优先级
	    如果样式冲突时，按照不同的样式规则的优先级来应用样式
	    浏览器缺省设置     最低
	    外部或内部样式表   中
	     就近原则
	    内联样式           最高
	 4、练习
	    1、声明一个 <h3>元素
	    2、内联方式：文本颜色 gray色
	    3、内部样式表：文本颜色 red色，字体大小 30pt
	    4、外部样式表：文本颜色 yellow色，字体大小 10pt，背景颜色 silver
	    5、改变内部样式表与外部样式表位置，查看效果
	 5、显示调整优先级
	    !important 规则

	    将!important添加在样式属性值之后，中间用 空格 隔开即可
	    作用：
	      显示调整优先级
2、CSS语法
   1、选择器
      作用：规范页面中哪些元素能够使用定义好的样式。
      1、通用选择器
         作用：匹配页面上所有的元素
	 语法：*
	 *{
	    
	 }
	 注意：尽可能的少用
      2、元素选择器
         作用：匹配页面中某个元素的样式
	 div{...}
	 p{...}
	 pre{...}
      3、类选择器
         作用：允许使用标签所附带的class属性值进行引用

	 特点：一段公共的样式，谁想用，谁就过来引用

	 语法：.类名{}
	   注意：
	     1、不能以数字开头
	     2、不能包含特殊字符(-,_)
	   引用：
	     <p class="类名"></p>

	 多类选择器：
	   允许让一个元素应用多个类选择器 
	   <p class="类名1 类名2"></p>
	 分类选择器：
	   将元素选择器 和 类选择器 联合使用。从而实现对某种元素不同样式的细分控制。
	   语法：元素选择器.类选择器{}
      4、id选择器
         作用：使用元素所附带的id属性值来进行样式的声明
	 语法：#idValue{}
      5、群组选择器
         1、作用 
	    定义 一组 选择器 的公共样式
	 2、用 , 隔开的 选择器列表
	    div,p,.text,#top,div.important{
		color:green;
	    }
      6、后代选择器
         1、作用
	    依托于 后代 关系，匹配页面的元素
	    后代：
	      一级 以及 多余一级父子关系
	 2、语法
	    选择器1 选择器2{}
      7、子代选择器
         1、依托于 子代 关系，匹配页面的元素
	    子代：只有 一级 父子关系的 
         2、语法
	    选择器1>选择器2{}
      8、伪类选择器
         1、作用
	    用于 匹配元素不同状态时的样式
	 2、语法
	    :伪类名称{}
	    选择器:伪类选择器{}
	 3、分类
	    1、链接伪类
	       1、:link
	          匹配 尚未 访问的超链接的状态
	       2、:visited
	          匹配 访问过 的超链接的状态
	    2、动态伪类
	       1、:hover
	          匹配 鼠标悬停 在元素上的状态
	       2、:active
	          匹配元素 被激活时 的状态
	       3、:focus
	          匹配元素 获取焦点 时的状态
		  多数用在 <input type="text" /><input type="password">上

	    3、目标伪类
	    4、元素状态伪类
	    5、结构伪类
	    6、否定伪类
   2、选择器优先级
      权值：标识当前选择器的重要程度。权值越大优先级越高。 
      元素选择器        1
      类选择器          10
      伪类选择器        10
      ID选择器          100
      内联样式          1000
      选择器的权值 加到一起，大的优先
      权值相同，以后定义为主
3、尺寸与边框
   1、CSS单位
      1、尺寸单位
         % : 相对单位
	 in : 英寸  --> 2.54cm
	 cm : 厘米
	 mm : 毫米
	 pt : 磅 --> 1/72in 文字大小使用
	 px : 像素,尺寸，文字大小
	 em : 倍数
	 注意：css中的数值，如果有单位的话那就不能省略
      2、颜色单位
         1、颜色英文名称
	    red,blue,green,yellow,
	 2、rgb(r,g,b)
	    r : 0-255
	    g : 0-255
	    b : 0-255
         3、rgb(r%,g%,b%)
	 4、#rrggbb
	      0-9、A-F 组成
	     #000000 ：黑色
	     #ffffff ：白色
	 5、#rgb
	    #rrggbb 缩写 
	    #000000 --> #000
	    #11ffaa --> #1fa
   2、尺寸属性
      1、尺寸属性 
         改变元素宽和高
      2、属性
         1、宽度
	    width
	    min-width
	    max-width
	    注意：width 属性 不要和 min-width或max-width 一起使用
	 2、高度
	    height
	    min-height
	    max-height
      3、注意
         哪些元素允许修改尺寸？
	   1、块级元素 允许
	   2、存在 width和height html 属性的元素允许该
	      img,table
	 不具备 width 和 height 的行内元素 不能改变其尺寸
      4、溢出
         1、产生溢出
	    当元素大小不足以显示下所有的内容时，那么内容就会溢出。
	 2、溢出处理属性
	    属性：overflow
	    取值：
	      1、visibile
	         默认值，显示
	      2、hidden
	         溢出隐藏
	      3、scroll
	         元素内部显示滚动条
		 溢出时可用 
	      4、auto
	         溢出时显示滚动条
		 没有溢出，则无滚动条
   3、边框属性
      1、边框属性(重点)
         1、简写方式
	    border:width style color;
	    width:宽度
	    style:样式
	      取值：
	        1、solid ：实线
		2、dotted ：虚线
		3、dashed ：虚线
	    color:颜色

	    四条边框的 宽度 样式 颜色
	 2、单边定义
	    border-方向:width style color;
	    方向：
	       1、top : 上
	       2、bottom ：下
	       3、left ：左
	       4、right ：右
	 3、单属性定义
	    border-属性:值;
	    属性：
	      1、width ：宽度
	      2、style ：样式
	      3、color ：颜色

	      四条边的某一个属性
	 4、单边框单属性
	    border-方向-属性:值;

	    border-left-width:
	    border-bottom-style:
      2、边框倒角(重点)
         1、倒角
	    将元素直角倒成圆角
	 2、属性
	    border-radius
	    取值：
	      1、具体数值
	      2、百分比
	         设置 圆形 时使用
	 3、单角设置
	    border-top-left-radius:左上角
	    ...
      3、边框阴影
         1、属性
	    box-shadow
	 2、取值
	    由多个值组成的值列表
	    box-shadow:h-shadow v-shadow blur spread color inset;
	    h-shadow:必须，阴影水平偏移位置, 值为正，向右偏，值为负，向左偏
	    v-shadow:必须，阴影垂直偏移位置，值为正，向下偏，值为负，向上偏
	    blur : 可选，模糊距离
	    spread :可选， 阴影尺寸
	    color:可选，颜色
	    inset :可选，将默认外阴影改为内阴影
      4、轮廓
         属性：outline
	 取值：width style color

	 outline-width:
	 outline-style:
	 outline-color:

	 常用：
	   outline:0;
	   outline:none;
	   取消轮廓

	   border:0;
	   border:none;
	   取消边框


边框颜色取值：transparent 透明色

******************************************
				    第二天

1、回顾
   1、CSS概述
      1、CSS 
         样式表
      2、CSS 与 HTML
         HTML 负责 搭建网页
	 ＣＳＳ　负责　构建样式
　　　3、CSS与HTML使用原则
	  1、尽量使用CSS属性替代HTML属性
	  2、替代不了的属性只能使用html
      4、使用方式
         1、内联方式
	    <p style="样式声明;"></p>
	    样式声明：
	      样式属性:属性值;
	 2、内部样式表
	    <head>
	      <style>
		样式规则1
		样式规则2
		...
	      </style>
	    </head>
	    样式规则：
	      选择器{
	        样式声明;
	      }
         3、外部样式表
	    1、创建独立的css文件描述样式规则
	    2、在对应的网页中将css文件引入
		<link rel="stylesheet" href="cssURL">
      5、特征
         1、继承性
	 2、层叠性
	 3、优先级
	    层叠性基础上，样式冲突时，按照优先级来引用样式
	    浏览器缺省设置
	    内部或外部样式表
	      就近原则
	    内联方式
      6、!important
         语法：属性名:值 !important;
   2、CSS语法
      1、选择器
         1、通用选择器
	    *{}
	    注意：效率较低
	 2、元素选择器
	    由 元素名称 作为选择器
	    
	 3、类选择器
	    可以由元素所附带的class属性值进行引用
	    语法：.类名{}
	          <p class="类名"></p>

	    多类选择器
	    <p class="类名1 类名2"></p>
	    
	    分类选择器
	    <span class="text"></span>
	    <div class="text"></div>
	    元素选择器.类选择器{}
	    span.text{}
	 4、id选择器
	    #idValue{}

	    <p id="idValue"></p>
	 5、群组选择器
	    由 , 隔开的选择器列表
	    p,span,#main,dl.test{}
	 6、子代选择器
	    通过 位置关系 实现元素的匹配
	    子代：只有一级层级关系
	    选择器1>选择器2{}
	    div>span{}
	    #main>.important{}
	 7、后代选择器
	    通过 位置关系 实现元素的匹配
	    后代：一级 以及 多余 一级的关系
	    选择器1 选择器2{}
	 8、伪类选择器
	    作用：用于匹配元素不同的状态
	    1、链接伪类
	       :link
	       :visited
	    2、动态伪类
	       :hover
	       :active
	       :focus
	    常用：
	      a{}
	      a:hover{}
   3、尺寸与边框
      1、单位
         1、尺寸
	    % :
	    px :
	    pt :
	 2、颜色
	    #rrggbb
	    #rgb
      2、尺寸属性
         1、属性
	    1、
	      width : 宽度
	      min-width : 
	      max-width :
	    2、
	      height : 高度
	      min-height :
	      max-height :
	 2、允许修改尺寸元素
	    1、块级 允许修改宽和高
	    2、行内元素 不允许修改
	       但是 具备 width 和 height html属性的元素 可以修改
	    3、行内块
	       所有的行内块是允许被修改宽和高的 
	       <input>
	       display:inline-block
         3、溢出
	    属性：
		overflow
		overflow-x
		overflow-y
	    取值：
	       1、visible
	          默认值，可见
	       2、hidden
	          隐藏
	       3、scroll
	          显示滚动条
	       4、auto
	          溢出时显示滚动条
      3、边框属性
         1、边框
	    1、简写方式
	       border:width style color;
	    2、单边定义
	       border-方向:width style color;
	       方向：
	         top : 上
		 bottom ：下
		 left ：左
		 right ：右
	    3、单属性定义
	       border-属性:值;
	       属性：
	         width：
		 style：
		 color：
	    4、单边单属性
	       border-方向-属性:值;
         2、边框倒角
	    属性：border-radius
	    取值：
	       1、具体数值
	       2、%
	 3、边框阴影
	    属性：box-shadow
	    取值：
	      h-shadow：水平偏移
	      v-shadow：垂直偏移
	      blur：模糊距离
	      spread：阴影尺寸
	      color：颜色
	      inset：内阴影
         4、轮廓
	    属性：outline
	    取值：width style color
	    常用：
	       outline:none;
	       outline:0;
***********************************
1、框模型(重点)
   1、什么是框模型
      框模型 ：box model,又称为 盒模型
      定义了元素框 处理元素内容，内边距以及外边距的方式
      <div>
        <img>
      </div>
      内边距：元素框中的内容 与 元素框之间的距离
      外边距：元素 与 元素 之间的距离

      1、宽度和高度
         width 和 height 只负责定义内容区域的 大小

      2、内边距，外边距
         内外边距 其实描述的就是元素的边框内外的距离 
      3、框模型计算模式
         对象实际宽度=左右外边距+左右边框+左右内边距 + width;
	 对象实际高度=上下外边距+上下边框+上下内边距 + height;
   2、外边距
      1、什么是外边距
         外边距是位于边框之外的一段空白距离，默认情况下，是不允许被其他元素所占据的。
      2、属性
         margin
	 取值：
	   1、单位
	      1、px
	         具体距离
	      2、百分比 %
	      3、值为 auto
	         左右外边距为 auto时
		 允许使块级元素水平居中
	      4、值为负值
	         向相反方向移动元素
	   2、数量
	      margin:value;四个方向外边距
	      margin:v1 v2;v1:上下外边距 v2:左右外边距
	      margin:v1 v2 v3;v1:上外边距 v2:左右外边距 v3:下外边距
	      margin:v1 v2 v3 v4;上 右 下 左
	 单边设置：
	 margin-left:左外边距
	 margin-right:右外边距
	 margin-top:上外边距
	 margin-bottom:下外边距
	   3、取值为auto时
	      1、只对 左右 外边距有效，上下外边距无效
	      2、取值为auto时用于控制块级元素水平居中对齐
		 前提：必须设置该元素的宽度属性否则无效。
	   4、默认外边距
	      页面中 有些元素会具备默认外边距
	      可以通过 css 重写的方式取消默认外边距
	   5、外边距合并
	      当两个垂直外边距相遇时，他们将形成一个外边距，值以大者为主
	   6、问题：外边距溢出
      父子元素时，设置子元素的上下外边距时，有可能会作用在父元素上
      条件：
        1、父元素没有边框时，而且设置第一个子元素的上外边距时，会产生外边距溢出
      解决方案：
        1、为父元素增加 上(下)边框
	2、为父元素设置一个上(下)内边距，用来取代子元素的上(下)外边距
	3、父元素中，增加一个 空table作为第一个子元素
   3、内边距
      1、什么是内边距
         内容区域和边框之间的距离

	 注意：内边距会扩大元素边框所占据的区域
      2、属性
         padding
	 取值：
	   1、单位
	      1、px
	      2、%
	   2、数量
	      padding:value;
	      padding:v1 v2;上下 左右
	      padding:v1 v2 v3;上 左右 下
	      padding:v1 v2 v3 v4;上右下左
	 padding-top:上内边距
	 padding-bottom:
	 padding-left:
	 padding-right:
      3、注意
         给行内元素增加内边距时，它不会影响到其他的元素
2、背景(重点)
   1、背景作用
      背景色：以单一颜色作为背景
      背景图：以图片的方式做为背景

      注意：从 边框 位置处开始 描绘背景
   2、背景属性
      1、背景色
         属性：background-color
	 取值：合法的颜色值、transparent
      2、背景图像
         属性：background-image
	 取值：url(图像路径);
	 background-image:url(images/a.jpg);
      3、背景平铺(重复)
         属性：background-repeat
	 取值：
	    1、repeat
	       默认值，水平，垂直都平铺
	    2、no-repeat
	       无平铺效果
	    3、repeat-x
	       只水平方向平铺
	    4、repeat-y
	       只垂直方向平铺
      4、背景图尺寸
         属性：background-size
	 取值：
	   1、value1 value2
	      具体的数值，
	      value1表示 宽度，
	      value2表示 高度
	   2、value1% value2%
	      元素宽和高的占比
	   3、cover
	      将背景图扩大，以至于背景图能够完全覆盖到元素区域    
	   4、contain
	      将背景图扩大，以至于背景图的宽度或高度 有一个适应元素区域即可。
      5、背景图片固定
         属性：background-attachment
	 取值：
	    1、scroll
	       滚动，默认值
	    2、fixed
	       固定，背景图不会随着滚动条而发生滚动
      6、背景定位
         属性：background-position
	 取值：
	    1、x y
	       x:背景图像横向 偏移距离
	         取值为正，则向右移动
		 取值为负，则向左移动
	       y:背景图像纵向 偏移距离
	         取值为正，则向下移动
		 取值为负，则向上移动
	    2、x% y%
	       0% 0% : 原始位置，左上方
	       100% 100% : 右下
	       50% 50% : 元素正中间
	    3、关键字
	       x:left,center,right 取代
	       y:top,center,bottom 取代
	       background-position:top left;
      7、CSS Sprites
         将 若干幅图像 封装到一幅图像中
	 根据需求 移动图像位置 从而显示出想看的图像
      8、背景 综合属性
         属性:background
	 取值:color url() repeat attachment position;

	 background:red;
	 background:url(images/a.jpg);

	 background:url() no-repeat 0px 0px;
3、渐变
   1、渐变
      1、线性渐变
      2、径向渐变
      3、重复渐变

      色标：颜色 以及 颜色出现的位置
   2、语法
      属性：background-image
      取值：
         1、url() ：背景图像地址
	 2、linear-gradient() 线性渐变
	 3、radial-gradient() 径向渐变
	 4、repeating-linear-gradient()
	    重复线性渐变
	 5、repeating-radial-gradient()
	    重复径向渐变
   3、线性渐变
      语法：
        background-image:
	linear-gradient(angle,color-point1,color-point2,...);
	  1、angle
	     渐变填充方向或角度
	     取值：
	       1、关键字
	          1、to top
		     从下向上填充
		  2、to bottom 
		     从上向下填充
		  3、to left
		     从右向左填充
		  4、to right
		     从左向右填充
	       2、角度
	          0deg ~ 360deg
		  0deg :to top
		  90deg :to right
		  180deg :to bottom
		  270deg :to left
	  2、color-point
	     色标
	     由颜色 以及 颜色出现的位置(可以省略)组成

	     语法：颜色 位置
	        red 0px
		green 20px
   4、径向渐变
      1、语法
        background-image:
	radial-gradient([size at position],color-point1,color-point2,... ...)

	1、size at position
	   size:半径,以px为单位数值
	   position:圆心所在位置
	      x y : 具体数值
	      x% y% : 元素宽和高的占比决定
	      关键字：
	        x:left,center,right
		y:top,center,bottom
   5、重复线性渐变
      background-image:
      repeating-linear-gradient(angle,color-point);
      color-point : 位置一定要给绝对的数值(px)，不要给相对 %
   6、浏览器兼容性
      不支持的版本，增加浏览器前缀
      Firefox : -moz-
      Chrome Safari : -webkit-
      Opera : -o-
      IE : -ms-

      background-image:linear-gradient();

       background-image:-moz-linear-gradient();
       background-image:-webkit-linear-gradient();
4、文本格式化

******************************************
				    第三天

1、回顾
   1、框模型
      1、what
         元素框处理 元素的内容，边框，内边距，外边距的方式

	 元素实际宽度=左右外边+左右边框+左右内边距+width
	 元素实际高度 同上
      2、外边距 
         1、what
	    元素边框外的距离，不允许被其他元素所占据
	 2、属性
	    margin
	    取值：
	      1、单位
	         1、px
		 2、%
		 3、auto
		    左右有效
		    控制块级元素水平居中,前提元素必须有宽度
		 4、负值
		    向相反的方向去移动
	      2、数量
	         value ：四个方向外边距
		 v1 v2 ：上下  左右
		 v1 v2 v3 :上 左右 下
		 v1 v2 v3 v4 : 上右下左
   
	    margin-left:
	    margin-right:
	    margin-top:
	    margin-bottom:
	 3、外边距合并
	    两个垂直外边距相遇时将合并成一个，值以大者为主
	 4、外边距溢出
	    当父元素没有上边框，并且设置第一个子元素的上外边距时，会产生外边距的溢出。
	    解决方案：
	     1、为父元素增加上边框
	     2、通过父元素上内边距取代子元素上外边距
	     3、增加 <table></table>作为第一个子元素
      3、内边距
         1、what
	    边框之内，距离元素之间的距离
	    注意：会扩大元素边框内的占地区域
	 2、属性
	    padding
	    取值：
	      1、单位
	         1、px
		 2、%
	      2、同 margin
	    padding-top/bottom/right/left:
	 3、注意
	    行内元素增加padding时，不会影响到其他元素
   2、背景属性
      注意：背景是用元素边框位置处开始描绘(从左上开始到右下结束)
      1、背景颜色
         background-color
      2、背景图像
         background-image:url();
      3、背景图像平铺
         background-repeat
	 取值：
	   repeat,no-repeat,repeat-x,repeat-y
      4、背景图像尺寸
         background-size
	 取值：
	   x y :具体数值
	   x% y% :
	   cover : 覆盖
	   contain : 包含
      5、背景图像固定
         background-attachment
	 取值：
	   scroll ：默认
	   fixed ：固定
      6、背景图像定位
         background-position
	 取值：
	   1、x y
	      x : 
	        为正，右偏移
		为负，左偏移
	      y :
	        为正，下偏移
		为负，上偏移
	   2、x% y%
	   3、关键字
	      x:left,center,right
	      y:top,center,bottom
      7、背景综合属性
         background:color url() repeat attachment position;
   3、渐变
      1、what
         多种颜色进行柔和的过渡
      2、色标
         颜色 以及 出现的位置
      3、分类
         1、线性渐变
	 2、径向渐变
	 3、重复线性渐变
	 4、重复径向渐变
      4、属性
         background-image:
	 1、线性渐变
	    linear-gradient(angle,color-point);
	    angle:方向或角度
	     取值：
	       1、方向关键字
	          to top
		  to bottom
		  to right
		  to left
	       2、角度
	          ndeg n:0-360
	    color-point:色标
	      颜色 位置
         2、径向渐变
	    radial-gradient([size at position],color-point);
	    size at position:
	     size:圆的半径
	     position : 圆心所在位置,由x y 两个值组成
      5、浏览器兼容性
         对于不支持渐变的浏览器，添加浏览器前缀
	 Firefox : -moz-
	 Chrome Safari : -webkit-
	 Opera : -o-
	 IE : -ms-

	 浏览器不支持属性的话，前缀加在属性前。
	 浏览器支持属性但不支持值的话，前缀加在值前。

	 background-image:-webkit-linear-gradient();
	 ... ...

*******************************
1、文本字体属性
   1、字体属性
      1、指定字体
         属性：font-family
	 取值：字体1,字体2,... ...
	 font-family:"microsoft yahei",Arial;
      2、字体大小
         属性：font-size
	 取值：px、pt 为单位的数值
      3、字体加粗
         属性：font-weight
	 取值：
	    normal ：大部分标记的默认值
	    bold ：加粗,hn，b，strong默认值
	    value :400 - 900
      4、字体样式
         属性：font-style
	 取值：
	   1、normal ：正常
	   2、italic ：斜体
      5、小型大写字母
         Aa Bb Cc
	 作用：将指定的小写字母变换成大写形态，大小与小写字母一样
	 属性：font-variant
	 取值：
	   1、normal ：正常
	   2、small-caps ：小型大写
      6、字体综合属性
         属性：font
	 取值：style varaint weight size family;
	 注意：使用简写属性时，必须包含font-family , 否则没效果
	 font:12px; --无效果
	 font:12px "微软雅黑"; --允许
   2、文本属性
      1、文本颜色
         属性:color
	 取值：颜色值
      2、文本排列
         作用：控制文本的水平对齐方式
	 属性：text-align
	 取值：left/center/right/justify
      3、文本修饰
         作用：线条修饰
	 属性：text-decoration
	 取值：
	    1、none ：无线条样式
	    2、underline ：下划线
	    3、overline ：上划线
	    4、line-through ：删除线
      4、行高
         作用：控制一行文本的高度。如果行高的高度高于字体本身大小，那么该行文本将在指定行高高度内呈现出垂直居中的显示效果
	 属性：line-height
	 取值：以px 为单位的数值

	 font:12px/24px "微软雅黑";
      5、首行文本缩进
         属性：text-indent
	 取值：以 px 为单位的数值
      6、文本阴影
         属性：text-shadow
	 取值：h-shadow v-shadow blur color;
2、表格属性
   1、常用属性
      1、常用属性
         1、内边距
	    padding
	 2、尺寸属性
	    width,height
	 3、文本字体属性
	    font-*
	    text-align,...color
	 4、border
	 5、背景属性
	    background
      2、垂直对齐
         属性：vertical-align
	 注意：该属性设置在td中，控制单元格内容的垂直对齐方式
	 取值：
	   top,middle,bottom
   2、特有样式属性
      1、边框合并
         属性：border-collapse
	 取值：
	   1、separate
	      默认值，分离边框
	   2、collapse
	      边框合并
      2、边框边距
         作用：设置 td 中相邻两个边框的距离
	 前提：必须为分离边框模式使用
	 属性：border-spacing
	 取值：
	   value : 同时指定上下和左右的边框边距
	   v1 v2 : v1表示水平边距，v2表示垂直边距
      3、显示规则
         作用：指定单元格宽度的计算模式
	 属性：table-layout
	 取值：
	   1、auto ：默认值，自动表格布局，由单元格内容来决定单元格的宽度。
	   2、fixed ：固定表格布局，有table和td的宽度值来决定td的宽。
	 1、自动表格布局特点
	    1、单元格大小会适应内容
	    2、表格复杂时，加在速度较慢
	    3、适用于不确定每列大小时使用
	 2、固定表格布局特点
	    1、单元格宽度由自定义数值为主，与表格显示内容无关
	    2、会加速显示表格，浏览器加载完第一行时就不用在进行后续的计算了。
	    3、不够灵活
3、浮动(重难点)
   1、定位概述
      1、什么是定位
         页面上的元素，出现的位置在哪
      2、定位分类
         1、普通流定位
	 2、浮动定位

	 3、相对定位
	 4、绝对定位
	 5、固定定位
      3、普通流定位
         又称为：文档流定位
	 页面元素的默认定位方式
	 文档流规范：
	   1、块级元素
	      从上到下排列，独占一行
	      可通过 margin 改变元素位置
	      
	   2、行内元素
	      从左到右排列，多个元素能在一行，显示不下，换行
	      可以通过 左右 margin  改变元素的横向位置
   2、浮动定位
      1、浮动特点
         1、脱离文档流
	    不占据页面空间
	 2、浮动元素 会停靠在 父元素的左边或右边或其他已浮动元素的边缘上
	    解决问题：能够让多个块级元素在一行内显示
      2、属性
         float
	 取值：
	   1、none
	      默认值，无浮动
	   2、left
	      左浮动
	   3、right
	      右浮动
      3、浮动的影响或效果
         1、如果 父元素的宽度 无法容纳所有的浮动元素，那么最后一个将换行
	 2、任何元素一旦浮动，将变成块级元素
	 3、如果没限制元素的尺寸的话，那么浮动之后，宽度将变成自适应
	 4、文字、行内、行内块 采用环绕的方式排列的。如果有浮动元素占据了位置后了，他们会将位置让开
      4、清除浮动所带来的影响
         1、作用
	    清除其他浮动元素对当前元素所带来的影响
	 2、属性
	    clear
	    取值：
	      1、none
	         默认值
	      2、left
	         清除当前元素左边的浮动元素给带来的影响
		 左边不允许出现浮动元素
	      3、right
	         清除当前元素右边的浮动元素给带来的影响
		 右边不允许出现浮动元素
	      4、both
	         清除两边的浮动元素给带来的影响
		 两边都不允许有浮动元素
      5、浮动元素给父元素带来的影响
         解决方案：
	   1、设置父元素高度
	   2、overflow
	      撑起父元素的高度
	      overflow:hidden;
	      overflow:auto;
	      弊端：如果有溢出要显示的内容，也都同时给隐藏了。
	   3、增加 子元素（块级），并且设置其 clear属性值为 both 来解决
4、显示

******************************************
				    第四天

1、回顾
   1、文本字体属性
      1、字体
         1、font-family
	 2、font-size
	 3、font-weight
	    normal
	    bold
	 4、font-style
	    normal
	    italic
	 5、小型大写字母
	    font-variant
	    normal
	    small-caps
	 6、字体属性
	    font:style variant weight size family;
      2、文本属性
         1、color
	 2、text-align
	    left，center，right，justify
	 3、text-decoration
	    none 
	    underline
	    overline
	    line-through
	 4、line-height
	    指定一行数据的高度
	 5、text-indent
	 6、text-shadow
	    h-shadow v-shadow blur color
   2、表格
      1、常用属性
         1、padding，border，width，height，background ... 
	 2、vertical-align
      2、特有属性
         1、border-collapse
	    separate : 默认，分离边框
	    collapse : 边框合并
	 2、border-spacing
	    value1 : 水平和垂直间距相同
	    v1 v2 : v1 水平间距 v2 垂直间距
	    前提：分离边框样式时使用
	 3、显示规则
	    table-layout
	    取值：
	      1、auto
	         自动表格布局 
		 每列的宽度都需要计算
		 效率低
	      2、fixed
	         固定表格布局
		 单元格宽度以设定值为主
		 加载完第一行时就不用再计算其他的单元格 
		 效率高，但不够灵活
   3、定位-浮动定位
      1、定位
         位置
      2、分类
         1、普通流定位
	    文档流定位

	 2、浮动定位
	    1、解决问题
	       让块级元素在一行内显示
	    2、特点
	       1、脱离文档流
	          不占据页面空间
	       2、停靠在 父元素的 左边或右边 或 其他已浮动元素的边缘上
	    3、属性
	       float
	       left/right/none(默认值)
	    4、清除浮动
	       属性：clear
	       取值：left/right/both/none
	    5、注意
	       1、浮动元素只能左右停靠
	       2、所有的浮动元素都会变成块级
	       3、对父元素带来的影响
	          高度影响，父元素高度以没有浮动元素为主。
		  解决方案：
		   1、手动设置高度
		   2、通过 overflow 
		      overflow:hidden;
		      overflow:auto;
		   3、父元素中追加空块级元素，并设置其 clear属性值为 both
	 3、相对定位
	 4、绝对定位
	 5、固定定位
*************************************
1、显示
   1、显示方式
      1、什么是显示方式
         决定了元素在页面中如何来排列
      2、属性
         display
	 取值：
	   1、none
	      隐藏，让生成的元素不显示
	      特点：脱离文档流
	   2、block
	      让 元素 变成块级
	   3、inline
	      让 元素 变成行内
	      注意：以后不要把块级元素改变成行内
	   4、inline-block
	      让 元素 变成 行内块
	      位置摆放如同行内元素，但是会具备块级元素的特点(允许修改宽和高)
   2、显示效果
      1、visibility 属性
         作用：控制元素可见性
	 取值：
	   1、visible
	      默认值，显示的
	   2、hidden
	      隐藏，占据页面空间
	   3、collapse
	      用在表格元素。动态删除一行或一列时，不会影响表格整体布局

	display:none 与 visibility:hidden 的区别
	1、display属性时控制显示方式
	   display:none;让生成的元素不显示，并且不占据页面空间,脱离文档流
	2、visibility
	   专门改变元素可见性，取值为hidden的时候，会隐藏元素，但是不会脱离文档流
      2、opacity属性
         作用：改变元素透明度
	 取值：0.0(完全透明) - 1.0(完全不透明) 之间的数字
      3、vertical-align
         1、作用
	    垂直对齐方式
	 2、允许作用的元素
	    1、td
	    2、行内块中允许使用
	       允许设置 行内块，img ，左右两端文本 的垂直对齐方式

	       取值：
	         1、baseline
		    默认值，基线对齐
		 2、top/middle/bottom

		 Aa Bb Cc Jj Gg Yy
   3、光标
      属性：cursor
      取值：
         1、default
	 2、pointer
	    小手
	 3、crosshair
	    +
	 4、text
	    I
	 5、wait
	    等待
	 6、help
	    ?
2、列表属性
   1、列表项标志
      属性：list-style-type
      取值：
        none
	disc
	circle
	square
   2、列表项图像
      属性：list-style-image
      取值：url()
   3、列表项位置
      属性：list-style-position
      取值：
        1、outside
	   默认值，列表项标志位于内容区域之外
	2、inside  
	   将标志放在内容区域中
   4、列表属性 - list-style
      取值：type url() position;
      常用方式：list-style:none;
   5、列表使用场合
      1、从上到下，从左到右，并且具备相同特征的数据，全部使用列表。
3、定位
   1、属性
      1、position
         作用：规定元素的定位类型
	 取值：
	   static : 默认值，静态
	   relative : 相对定位
	   absolute : 绝对定位
	   fixed : 固定定位
      2、偏移属性
         作用：配合 上边 三种定位方式，实现元素的位置移动
	 top:上偏移
	 bottom:下偏移
	 left:左偏移
	 right:右偏移
      3、堆叠顺序
         属性：
	   z-index
	   只有 relative,absolute,fixed的时候才能使用
   2、定位-相对定位
      1、什么是相对定位
         相对于元素原来的位置偏移某个距离
      2、设置相对定位
         position:relative
	 通过 偏移属性 完成位置的移动
   3、定位-绝对定位
      1、什么是绝对定位
         1、脱离文档流
	    不占据页面空间
	 2、相对于 离它最近的已定位的祖先元素去实现定位


******************************************
				    第一天
css3 core ： 高级
1、复杂选择器
2、内容生成
3、多列(了解)
4、CSS Hack
**********************
1、复杂选择器
   1、兄弟选择器
      1、什么是兄弟选择器
         通过元素 位置 进行定位
      2、分类
         1、相邻兄弟选择器
	    1、what
	       匹配 某元素的 后一个 兄弟元素
	       特点：
	         1、只向后找，不向前找
		 2、只找一个，不找多个
	    2、语法
	       选择器1+选择器2
         2、通用兄弟选择器
	    1、what
	       匹配某元素后面的所有兄弟元素
	    2、语法
	       结合符：~
	       选择器1~选择器2
   2、属性选择器
      1、什么是属性选择器
         使用元素所附带的属性及其值来匹配页面的元素
	 <input id="txtName" class="border" maxlength=15 value="">
      2、语法
         []
      3、表现形式
         1、[attr]
	    attr:表示某具体属性名称
	    [id]:匹配页面中所有附带id属性的元素
	    [type]:
	 2、elem[attr]
	    elem : 表示页面中某一 具体元素
	    div[id] : 匹配页面中所有 附带 id属性的 div元素
	    input[name] :
	 3、elem[attr1][attr2]... ...
	    div[id][class] : 匹配页面中 所有附带 id 属性 以及 class 属性的 div元素
	 4、elem[attr=value]
	    value:表示具体的属性值
	    div[id="d1"] : 匹配 页面中 附带 id 属性并且值为 d1的div元素
	    eg：匹配 页面中 name属性值为 txtUsername 的 input 元素
	    input[name="txtUsername"]

	    elem[attr=value]
	    elem[attr='value']
	    elem[attr="value"]
	 5、elem[attr~=value]
	    attr属性值是一个值列表，value是该列表中的一个独立的值
	    多数用于多类选择器的引用上
	    <div class="c1 c2 c3 c4"></div>
	    div[class~=c2]
	 6、elem[attr^=value]
	    匹配 attr 属性值 以 value 作为开始的 elem 元素
	    div[class^=a]
	 7、elem[attr$=value]
	    匹配 attr 属性值以 value 作为结束的 elem 元素
	    div[class$=nd]
	 8、elem[attr*=value]
	    匹配 attr 属性值中 包含 value 字符的 elem 元素
   3、伪类选择器
      1、目标伪类
         1、what
	    突出显示 html 锚
	 2、语法
	    :target
      2、元素状态伪类
         状态：启用，禁用，被选中 
	 场合：多数用在表单元素中

	 1、:enabled
	    作用：匹配每个被启用的元素
	 2、:disabled
	    作用：匹配每个被禁用的元素
	 3、:checked
	    作用：匹配每个被选中的元素(单选按钮和复选框用)
      3、结构伪类
         1、:first-child
	    作用：匹配 属于其 父元素中的首个子元素
	 2、:last-child
	    作用：匹配 属于其 父元素中的最后一个子元素
	 3、:nth-child(n)
	    作用：匹配属于其父元素中的第n个子元素
	 4、:empty
	    作用：匹配 没有子元素的元素
	    <div>
		<p></p>
	    </div> 非 empty

	    <div>
	    </div> 非 empty

	    <div> </div> 非empty

	    <div></div> empty 
	 5、:only-child
	    作用：匹配属于其父元素中的唯一子元素的元素
      4、否定伪类
         :not(selector)
	 将 满足 selector 选择器的元素 排除出去
   4、伪元素选择器
      伪类：用于匹配元素
      伪元素：用于匹配 元素中的内容
      1、:first-line 或 ::first-line
         作用：匹配 某元素中的"首行"
      2、:first-letter 或 ::first-letter
         作用：匹配 某元素中的"首字符"
      3、::selection
         作用：匹配用户选区部分的样式

	 :与::的区别
	 1、
	   :用于 伪类选择器
	   ::用于伪元素中
	 2、W3C规范
	    ::只能用在 伪元素
	    :只能用在 伪类中
	 3、为了保证兼容性
	    通常 使用  : 即表示伪类也表示伪元素。
2、内容生成
   1、什么是内容生成
      通过 css 向指定的内容区域之前或之后插入一段数据
   2、伪元素选择器
      1、:before 或 ::before
        作用：匹配到内容区域之前
      2、:after 或 ::after
        作用：匹配到内容区域之后
	<div>  Hello World  </div>
   3、属性 ： content
      作用：插入生成的内容，配合 :before 以及 :after 一起使用
      属性：content
      取值：
         1、url() : 插入一幅图像到指定元素中
	 2、字符串 : 纯文本，使用 "" 引起来
	 3、计数器
	    生成有规律的数字
3、计数器
   1、what
      生成一串有规律的数字
      配合 内容生成 一起使用
   2、属性:counter-reset
      counter : 计数器
      reset : 重置 / 复位

      counter-reset : 声明/复位一个计数器

      语法：
        counter-reset:名称 值;
	注意：
	  1、值 可以省略，默认为 0
	  2、值 可以为正数也可以为负数
	  3、允许声明多个计数器
	     counter-reset:名1 值1 名2 值2 ... ...;
          4、声明的地方
	     不能放在使用的元素上去声明

	     <div></div>
	     <div></div>
	     <div></div>

	     <style>
		div{
		  counter-reset:c1 0;	
		}
	     </style>
   3、属性:counter-increment
         increment:增量
	 作用：设置某个选择器出现时，计数器的增量，默认值为1
      语法：counter-increment:计数器名 增量值;
         注意：
	    1、不能省略，否则计数器永远都是初始值
	    2、哪个元素想使用计数器，放在哪个计数器中声明
            <body>
	     <div></div>
	     <div></div>
	     <div></div>
            </body>
	     <style>
		body{
		  counter-reset:c1 0;	
		}
		div{
		  counter-increment:c1 1;
		}
	     </style>
   4、函数：counter()
     作用：引用计数器
     语法：counter(计数器名称)
     注意：
       1、配合 内容生成 content 属性 一起使用
       2、哪个元素用，在哪个元素中 写 counter()

     练习：
       1、HTML
          1.1 基本元素
	  1.2 块级元素
	  1.3 表单元素
       2、CSS
          2.1 选择器
	  2.2 边框属性
	  2.3 框模型
       3、Javascript
          3.1 变量
	  3.2 函数
4、多列
   1、分割列
      属性：column-count
      取值：数字
   2、列间隔
      属性：column-gap
      取值：以 px 为单位的数值
   3、列规则
      作用：列间隔之间的边框的 宽度 样式 颜色
      属性：column-rule
      取值：width style color;
            1px solid red;
   4、浏览器兼容性
      IE10+ , Opera 支持多列
      Firefox : -moz-
      Chrome & Safari : -webkit-
5、CSS Hack
   1、解决问题
      浏览器兼容性
   2、标准模式 和 混杂模式
      IE6 无兼容性可言

      IE6以后，遵循标准，出现了运行模式
      1、混杂模式
      2、标准模式
      3、准标准模式

      不同的模式：针对CSS(框模型) 和 JS解析会产生不同

      触发混杂模式：不声明 doctype 
      触发准标准模式：
        <!DOCTYPE html PUBLIC .... HTML4.01 Transitional  ...>

	<!DOCTYPE html PUBLIC .... HTML4.01 Frameset  ...>

	<!DOCTYPE html PUBLIC .... XHTML1.0 Transitional  ...>

	<!DOCTYPE html PUBLIC .... XHTML1.0 Frameset  ...>
      触发标准模式：
        1、<!doctype html public ... HTML4.01  ... strict.dtd>
	2、<!doctype html public ... XHTML1.0  ... strict.dtd>
	3、<!doctype html>
   3、CSS Hack
      1、不同浏览器
         IE，Chrome，Firefox
      2、同一厂商的不同版本浏览器
         IE6,IE7,IE8 ... 

      原理：使用样式规则的优先级 来解决问题
   4、解决兼容性
      1、CSS类内部Hack
         给样式规则 增加 前后缀 解决兼容性
	 + ： IE6，IE7
	 - ： IE6

	 同时出现的话
	 + ：IE7
	 - ：IE6
      2、选择器Hack
         给 选择器 加前缀 解决兼容性问题
	 *前缀：IE6识别
	   div{ .... }
	   *div{ ... }
	 *+前缀：IE7 
	   *+div{}
	 
	 @media screen{}
      3、HTML头部引用Hack
         通过 条件注释 判断浏览器版本
	 条件注释：HTML注释
	 语法：
	   HTML注释：<!-- -->

	   条件注释：
	   <!--[if 条件 IE 版本]>
	      内容1
	      内容2
	   <![endif]-->
	   条件：
	     1、gt 
	        指定版本 以上的版本有效
		gt IE 6 
	     2、gte
		大于等于指定版本 以上的版本
	     3、lt
	        小于 指定版本的 浏览器
	     4、lte 
	        小于等于 指定版本的浏览器
	     5、!
	        非IE浏览器时

	
	   <!--[if gt IE 6]>
	      内容1
	      内容2
	   <![endif]-->

	   <!--[if lte IE 8]>
	      内容1
	      内容2
	   <![endif]-->












	    最近：
	    已定位：relative，absolute，fixed
	    祖先：无限的父层元素
	 3、如果没有 已定位的祖先元素，那么它的位置就相对于最初的包含框(body或html)实现定位
      2、属性
         position:absolute;
	 通过 偏移属性 实现位置移动
      3、相关操作
         1、元素修改为 绝对定位后 将变成块级元素
	 2、margin
	    margin 可以用，但 auto 会失效
   4、堆叠顺序
      属性：z-index
      取值：无单位的数字，值越大越考上
      注意：
        父子关系没办法使用 z-index 调整，永远都是 子压在父上

	只有已定位元素才能使用relative,absolute,fixed
   5、固定定位
      1、作用
         将内容固定在页面的某个位置处
      2、属性
         position:fixed
	 通过 偏移属性 实现位置移动
      3、注意 
         固定定位会脱离文档流


******************************************
				    第二天
************************************************************
1. 转换
    1. 什么是转换
	转换：改变元素在网页中的 形状， 大小， 角度， 位置的一种效果
	
	2D  X轴向右正，Y轴向下正
	2D转换：使元素在X轴和Y轴上发生变化
	3D转换：使元素 能在 Z轴上发生变化
    2. 转换的属性（重点）
	属性：transform
	取值:
	  1. none
	     默认值，无任何转换效果
	  2. transfrom-function
	     表示一个或多个转换函数，中间用 空格 分开
    3. 转换的原点
	默认情况， 转换原点是在元素的中心处，x轴的50%位置处，y轴的50%位置处
	属性：transform-origin
	取值：数值/百分比/关键字
	   两个值：X轴和Y轴的位置
	   三个值：X轴，Y轴和Z轴的位置
	eg：设置 元素的转换原点在 左上角
	   transform-origin:0 0;
	   transform-origin:left center;
	   transform-origin:0% 0%;
    4. 2D转换
	1. 改变元素在Z和Y轴上的 位置，形状，角度，大小
	2. 2D转换-位移
	   1. 改变元素的位置
	   2. 属性 和 函数
	      属性： transform
	      函数： translate(x) 取值为正：向右移动；取值为负：向左移动
	             translate(x,y) X 取值为正：向右移动；取值为负：向左移动
				    Y 取值为正：向下移动；取值为负：向上移动
	      取值： 数值或百分比
	      单向位移函数：
		translateX(x);
		translateY(y);
	3. 2D转换-缩放
	   1. 改变元素的大小
	   2. 属性和函数
	      属性： transform
	      函数：
		scale（X）
		scale(X,Y)
		单向缩放：
		scaleX（X）
		scaleY(Y)
		注意：如果只给一个属性值的话，那么第二个值与第一个值默认相等
		取值：
		    默认值为1
		    缩小：0-1之间的小数
		    放大：大于1的值
	4. 2D转换-旋转
	   1. 属性和函数
	      属性：transform、
	      函数： rotate(ndeg)
		n取值为正：顺时针旋转
		n取值为负：逆时针旋转
	   2. 注意：
		元素旋转后，坐标轴也跟着转
	5. 2D转换-倾斜
	   1. 属性和函数
	      属性：transform
	      函数：
		skew(xdeg)
		skew(xdeg,ydeg)
		skewX(xdeg)
		取值为正，y轴按逆时针转几度
		skewY(ydeg)
		取值为正，x轴按顺时针转几度
     5. 3D转换
	1. 属性
	   perspective（投射眼）
	   作用：假定 人眼 到投射平面的距离
	   兼容性：
	   Chrome 和Safari
	   -webkit-perspective
	   注意：该元素 要放在 3D 转换元素的 父元素上。其子元素会获得透视效果
	2. 3D-坐标轴
	   x轴 y轴 z轴
	   z轴： 空间轴：从前到后为正，人眼在正面，离轴越近，东西显示的越大
	3. 3D-旋转
	   属性 和 函数
	   属性：transform
	   函数：
	     1. rotateX(xdeg)
	     2. rotateY(ydeg)
	     3. rotatez(zdeg)
	     4. rotate3d(x,y,z,deg)值为大于等于0,适用于旋转相同角度，判断是否轴参加旋转
		rotate3d(1,0,0,45deg)
		rotate3d(1,1,0,45deg)
		rotate3d(1,1,1,45deg)
	4. 3D-位移
	   属性：transform
	   函数：
	      translatez(z)
	      translate3d(x,y,z)
	5. 属性：transform-style
	   作用：将指定元素 保留其 2D形状 还是转换成3D形状
	   取值：
	     1. flat	
      	 	默认值：保留2D形状
	     2. preserve-3d
	        转换成3D元素

2. 过渡
	1. 什么是过渡
	   css值， 在一段时间内， 平滑过渡
	2. 四大要素（属性）
	   1. 指定过渡属性（必须）
	      属性：transition-property
	      取值：
	        1. none 默认值，都不用
		2. all  都采用过渡效果
	        3. property：css属性名称
		允许使用过渡的属性
		   1. 颜色属性（相关）
		   2. 取值为数值的属性（宽、高、大小等）
		   3. 转换属性：transform
		   4. 渐变（变相的颜色取值）
		   5. visibility
		   6. 阴影

		eg:
		   transition-property:width;
	   2. 指定过渡时间（必须）
	      作用：过渡效果在多长时间内完成
	      通常以 s (秒) 或 ms(毫秒) 为单位
	      默认值为0，即没有过渡效果
	      属性：transition-duration
	      取值：s|ms
	      eg:
		transition-duration:0.5s;
	   3. 指定过渡时间速度曲线函数
	      作用：描述过渡运动速率
	      属性：transition-timing-function
	      取值：
		1. ease:默认值，慢速开始，快速变快，慢速结束
		2. linear:匀速
		3. ease-in:慢速开始，加速结束
		4. ease-out:快速开始，慢速结束
		5. ease-in-out:慢速开始和结束，中间先加速，在减速
	   4. 指定过渡延迟时间
	      作用：当激发操作后，等待多长时间再显示效果
	      属性：transition-delay
	      取值：s|ms为单位
	3. 多个的过渡效果
	   transition-property:width,height;
	   transition-duration:5s,3s;
	   transition-timing-function:linear;
	   transition-delay:1s;
	4. 简写
	   transition:property duration timing-function delay;前两个属性必加
3. 动画
	1. 什么是动画
	   使元素从一种样式逐渐变化为另一种样式
	   注意：动画 有兼容性问题，必须加浏览器前缀
	2. 动画的使用
	   1. 声明动画
	      语法：
	  	  @keyframes 名称{
			执行到什么时候长什么样
			0% | from{
			  动画开始时的状态
			  width:100px;
			  background:red;
			}
			...
			100% | to{
			  动画结束时的状态
 			  width:100px;
			  background:green;
			}
		  }

		  @keyframes 名称{}
		  @-webkit-keyframes 名称{}
		  @-o-keyframes 名称{}
		  ...
	   2. 调用动画（有兼容性）
	      动画属性：
	      1. 指定调用动画名称
		 属性：animation-name
	      2. 指定动画执行时长
		 属性：animation-duration
	      3. 指定动画的速度时间曲线函数
		 属性：animation-timing-function
	      4. 指定动画的延迟时间
		 属性：animation-delay
	      5. 指定动画的播放次数
		 属性：animation-iteration-count
		 取值：
		   1. 数值；
	  	   2. infinite(无限次)
	      6. 指定动画播放方向
		 属性：animation-direction
		 取值：
		   1. normal 正向播放 0% ~ 100%
		   2. reverse 100% ~ 0%
		   3. alternate 奇数次数：正向播放；偶数次数：逆向播放
	      7. animation属性
		 animation:name duration timing-function delay interation-count direction
	      8. 指定动画播放前后的填充状态
		 属性：animation-fill-mode
		 取值：
		   1. none
		   2. forwards
		      动画完成后，保持在最后一个状态上
		   3. backwards
		      激发动画操作后，在延迟的时间内，显示在第一个状态上
		   4. both
	      9. 指定动画播放状态（播放|暂停）
		 属性：animation-play-statue
		 取值：
		   1. paused 暂停
		   2. running 播放   
4. CSS 优化   
	1. 优化目的
	   1. 减轻服务器的压力
	   2. 响应速度快
	   3. 提升用户体验度
	2. 优化的原则
	   1. 尽量减少http请求次数
		css Sprites
	   2. 在页面顶部 引入 css文件
	      1. 提升页面加载速度
	      2. 允许页面逐步显示
	   3. 将 CSS 代码 和 JS代码 放在外部文件中
	   	缓存
	3. 优化方法
	   1. 合并样式
	   2. 缩小样式文件
	   3. 选择更优的属性值
		outline：0；
	 	border:0;border:none;
	4. 减少样式重写
	   不要写*{}
	5. 代码压缩
	   去空格回车（代码压缩工具）
	6. 尽可能少 缩放图像
	7. 避免空的 href 和 src

******************************************
				    第三天
	                                                                         

                                                                                                   
                                                                                                                                                                                                                                                                                                                                                                                                                                          


















































