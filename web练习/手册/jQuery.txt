第一阶段： HTML + CSS		=> 静态网页工程师
第二阶段： JS + DOM		=> 网页交互工程师
第三阶段： jQuery + AJAX + HTML5	=> 小全栈工程师
第四阶段： 框架技术




1.复习：DOM
DOM把HTML文档看作对象(节点)树，通过操作对象(节点)，实现控制HTML文档的目的。
(1)查找节点
document.getElementById()
node.getElementsByClassName()
node.getElementsByTagName()
node.getElementsByName()
document.querySelector()
document.querySelectorAll()
(2)操作节点属性
node.getAttribute(名)
node.setAttribute(名, 值)
(3)操作节点内容
node.innerHTML
node.innerText / node.textContent
(4)操作节点的值
input.value
(5)操作节点样式
node.style.样式名 = 样式值;
document.getComputedStyle()
node.className
(6)遍历节点
node.parentNode
node.childNodes
node.lastChild
node.firstChild
node.nextSibling
node.previousSibling
(7)添加节点
var newChild = document.createElement();
parent.appendChild(newChild);
(8)删除节点
parent.removeChild(oldChild)
(9)替换节点
parent.replaceChild(newChild, oldChild)
(10)克隆节点
node.cloneNode()

原生DOM操作方法的不足：
(1)方法名比较麻烦，操作思路比较麻烦
(2)浏览器兼容性问题


2.jQuery介绍
jQuery是一个JS函数库，100+函数，用于简化DOM操作
官网：	http://jquery.com/			Write Less，Do More
jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling,
animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers.
With a combination of versatility and extensibility, jQuery has changed the way that millions of people write JavaScript.
所有的函数大体分为四组：
(1)DOM操作函数
(2)事件处理函数
(3)动画函数
(4)AJAX操作


3.使用jQuery提供的函数
jQuery的版本：
jQuery1.x：体积较大，兼容老IE，功能有缺失
jQuery2.x：体积稍小，放弃老IE，功能比较多
jQuery3.x：放弃老IE，功能更加丰富
面试题： jQuery3.0的新特性有哪些？  ―― 百度
jQuery 3.0在日前发布了最终的全新版本。从2014年10月，jQuery团队对这个主要大版本进行维护开始，web开发者社区便一直在期待着这一刻的到来，终于在2016年6月他们迎来了这一个最终版。
通过jQuery 3.0的版本更新说明，我们看到了一个保持着向后兼容的更轻便，更快速的jQuery。在本文中，我们将介绍一些令人眼前一亮的jQuery 3.0全新特性。
开始前的说明
如果你想要下载jQuery 3.0进行亲自实验，可以通过该页面进行下载。另外，升级指南和源代码也值得你一看。
如果你想要测试一下你的项目如何在jQuery 3.0中工作的，你可以尝试通过jQuery迁移插件来识别代码的兼容性问题，你也可以查看jQuery未来发展的时间表。
1. 移除旧的IE工作区
新的最终版最主要的目标是更加快速，更加时尚，因此，那些支持早于IE9版本的相关技术与工作区都被移除了。这意味着如果你想要或者需要支持IE6-8，你必须用回1.12版本，因为甚至是2.X版本都无法完整支持早于IE9的浏览器。


注意：在jQuery 3中还弃用了一些其它的功能。截止到2016年6月，升级指南还没有提供一个对于弃用功能的分组整理。因此，你如果想要了解弃用功能，可以通过ctrl+f键来进行搜索。
2. jQuery 3.0运行在Strict Mode下
大多数支持jQuery 3的浏览器都支持strict mode，而在本次更新中对此进行了规定。
虽然jQuery 3是写在strict mode中的，但是你需要了解的是你的代码并不需要运行在strict mode中，因此如果你想要把以前的代码迁移到jQuery 3，你不需要对已存在的jQuery代码进行重写。Strict和non-strict mode的JavaScript代码可以和谐共存。
这里有一些例外：某些版本的ASP.NET，因为strict mode的缘故，无法与jQuery 3兼容，如果你的代码涉及到了ASP.NET，你可以查看。
3. 引进for...of循环
jQuery 3支持for...of语句，这是由ECMAScript 6中新引进的一种for循环语句。这提供了对Arrays，Maps和Sets这样的可迭代对象一种更直接的遍历方法。
在jQuery中，for...of循环可以取代以前的$.each(...)语法，并且更容易通过jQuery的元素集合进行循环。

注意：for...of只能在支持ECMAScript 6的环境下或者使用Babel这样的JavaScript编译器下工作。
4. 动画方面采用新的API
jQuery 3使用requestAnimationFrame API来执行动画，使动画运行得更加顺畅、快速。新的API只用于支持它的浏览器，对于那些更老的浏览器（如IE9）jQuery使用先前的API来作为显示动画的后备方案。
RequestAnimationFrame已经推出一段时间了，如果你对如何使用它以及什么时候使用它感兴趣，CSS Tricks上有一篇很好的文章可供你阅读。

对包含特殊含义的字符串提供转义的新方法
新的jQuery.escapeSelector提供了对在CSS中存在特殊含义的字符串或字符进行转义的方法，该方法可使这些字符串或字符能够继续用于jQuery选择器中，而无需对那些无法进行正确理解的JavaScript解释器进行转义。
这个示例可以让你更好的了解这个全新的方法：
举个例子，页面中某个ID为“abc.def”的元素由于选择器将其解析为ID为“abc”且包含一个名为“def”的类的对象，而无法被$( "#abc.def" )选定。但是它可以由 $( "#" + $.escapeSelector( "abc.def" ) )来进行选定。
我无法确定发生中情况的频率，但是假如你碰到过这种类似的情况，这无疑给了你一个解决该问题的简单方法。
6. 类操作方法支持SVG
不幸的是，jQuery 3现在还无法完整的支持SVG，但是对于操作CSS类名称的jQuery方法，如.addClass和.hasClass现在可以将SVG文档作为目标。这意味着你可以修改（添加、删除、切换）或者查找SVG（可缩放矢量图形）下的jQuery类，然后使用CSS的类样式。（相关阅读：Styling Scalable Vector Graphic (SVG) with CSS）
7. 延迟对象现在与JS Promises兼容
JavaScript Promises，用于异步计算的对象，现在在ECMAScript 6中已经被标准化；它们的运行状况和特性的详细说明参见Promises/A+标准。
在jQuery 3中，延迟对象已经与新的Promises/A+标准相兼容，延迟对象已经成为让创建回调队列成为可能的可链对象(chainable objects)。
新的特性改变了异步回调函数执行过程，Promises允许开发者编写在逻辑上与同步代码更接近的异步代码。
查看升级指南的代码示例，或者查看关于JavaScript Promises基础的Scotch.io教程可以让你了解更多的信息。
8. jQuery.when对于多种参数的不同解读
$.when提供了执行回调函数的一种方法，它成为了jQuery 1.5之后的一部分。这个方法非常灵活，它适用于零参数，也适用于一个或者多个作为参数的对象。
jQuery 3改变了当包含$.then方法时对$.when中参数的解读方法，你可以对$.when进行额外的参数回调。
在jQuery 3中，如果你在$.when中的then方法内增加一个输入参数，该参数将会被解释成一个可与Promise兼容的"thenable"。
这意味着 $.when方法能够接收更加宽广的输入范围，比如原生的ES6 Promises和Bluebird Promises，这也使得编写更复杂的异步回调成为了可能。
9. 新的显示/隐藏逻辑
为了增加响应式设计的兼容性，与元素显示和隐藏的代码在jQuery 3中进行了更新。
从现在开始，.show、.hide和.toggle方法将会以内联样式为重点取代以前的计算样式，这种方式能够更尊重样式列表的改变。
新的代码尽可能的尊重样式列表中所呈现的数值，这意味着CSS规则可根据事件（如设备重新定位和窗口尺寸调整）进行动态改变。
这个说明文件申明了最重要的结果就是：
“作为结果，断开连接的元素除非指定了内联display: none，否则将不再认定为是隐藏的。因此，在jQuery 3.0中，.toggle不再对断开连接元素与已连接元素进行区分。”
如果你想要更好的了解关于全新的显示/隐藏逻辑，这个Github discussion会对你有帮助。jQuery开发者还发布了Google文档表来展示在不同用例下新规则的运转。
10. 对于防止XSS攻击的额外保护
jQuery 3增加一个额外的安全层用户用于防备跨站点脚本(XSS)攻击，它需要开发者指定$.ajax和$.get方法中的选项为dataType: "script"。
换言之，如果你想要执行跨站点的脚本请求，你必须在这些方法中作出这样的声明。
新的改变对于当“远程站点传递非脚本内容之后又提供有恶意脚本的服务内容”的情况是非常有效的。这个变化不会影响$.getScript方法，因为它明确地设置了dataType: "script"选项。
注意：推荐将jQuery.js的引入和自定义的JS代码编写在BODY最后。

jQuery函数的特性：
(1)几乎所有的函数都自带循环功能，可以对选中的元素进行遍历
(2)几乎所有的函数都返回jQuery对象本身，可以实现方法的链式调用



练习：点击按钮后，修改所有P的样式   11:02~11:15
$( "button" ).on( "click", function( ) {
//按钮的单击事件处理过程....
});

ES6新特性：新的字符串声明方式―― ``字符串
(1)可以包含${}形式的变量占位符，如：
var str= `用户名：${uname}  年龄：${age+2}`
(2)支持字符串的换行
var str = `<tr>
<td></td>
</tr>`;

区分：DOM对象和jQuery对象
(1)DOM对象：浏览器把每个HTML标签都对应创建一个DOM对象
(2)jQuery对象：通过jQuery选择器函数($())返回的类数组对象，其中封装着DOM对象
(3) jQuery对象不能使用DOM对象的成员；反之也不行！
(4)jQuery对象转换为DOM对象：
$('div')[0].style.color = '#f00';
(5)DOM对象转换为jQuery对象：
$(domObj).css('color', '#f00');		//注意$()里边不能使用引号

练习：点击二个按钮(button)，把当前页面的背景颜色改为淡黄色，按钮上的文字改为“请稍候...”
要求：第一个按钮的处理使用原生DOM方式；第二个按钮使用jQuery方式。jQuery中修改元素的innerHTML使用 $(..).html('新内容')函数


4.使用jQuery查找元素 ―― 重点
jQuery中查找元素，使用函数：
jQuery('选择器') 或其别名 $('选择器')
其中的参数选择器支持CSS中所有的选择器，并进行了扩展。
(1)Basic（基本选择器）
#id		.class	  div		*		s1,s2,s3

练习：实现一个点击可以展开/收起的下拉菜单
使用*选择器把所有元素的margin和padding清除
<div class="dropdown">
<a href="#">产品大全</a>
<ul class="menu"></ul>
</div>

(2)Hierarchy（层级选择器）
parent > child				parent  child
prev + nextSibling			prev ~ nextAllSibling

练习：实现一个标签页组件的头部
ul.tabs>li*3>a
为a绑定事件监听函数，修改a的样式

(3)Attribute（属性选择器）
[属性名]			[属性名="值"]
[属性名^="值")	[属性名$="值"]
[属性名*="值"]		[属性名!="值"]

练习：  使用属性选择器		16:10~16:25
(1)选定所有具备title属性的链接元素，添加边框
(2)选定所有指向空锚点(#)的链接元素，颜色淡灰
(3)选定所有指向绝对URL(http开头)的链接元素，背景颜色淡蓝
(4)选定所有指向的图片URL(以.jpg/png/gif结尾)的链接元素，字体加粗

(4)Form（表单元素选择器）
:text		:password	:radio	:checkbox
:submit	:reset	:button	:image
:hidden	:file
$(':text') 选定 <input type="text">的元素
:disabled		:enabled		:checked		:selected
选定具有特定属性的表单元素

练习：

点击“提交”，输出用户选中的兴趣的数量；
点击“取消选择”，将所有选中元素取消选中；
点击“选中所有”，将选中所有的checkbox元素。


(5)Basic Filter（基本过滤选择器）
:first		:last		:even	 :odd
:eq(i)	:lt(i) LessThan		:gt(i) GreaterThan
:not(selector)
注意：基本过滤选择器把选定的所有元素放在一个大的集合中！下标从0开始分配。

练习：  ol>li*5	ul>li*6
(1)选定第一个li，字体加粗
(2)选定最后一个li，字体变斜
(3)选定奇数个li，背景淡蓝色
(4)选定偶数个li，背景淡黄色
(5)选定第3个li，添加删除线
(4)选定大于3个li，添加border-left

(6)Child Filter（子元素过滤选择器）
:first-child	:last-child
:nth-child(2 / odd / even / 3n+1)		:only-child
注意：子元素过滤选择器把选定的元素按照所在父元素进行分组！下标从1开始分配。

(7)Content Filter（内容过滤选择器）
(8)Visibility Filter（可见性过滤选择器）



课后练习：
(1)默认只显示部分内容，以及“其它品牌相机”

点击“显示全部品牌”按钮后，所有隐藏的内容都被显示出来：


(2)使用jQuery控制样式，实现如下的表格效果：






复习：
jQuery是一个JS函数库，100+函数，分为四组：
(1)简化DOM操作函数――重点
(2)事件处理
(3)动画函数
(4)AJAX函数


查找元素――$('选择器')
	(1)基本选择器
		#id  .class  div  *  s1,s2,s3
	(2)层级选择器
		p  c			p > c
		prev + next		prev ~ nextAll
 	(3)属性选择器
		[名]		[名=值]		[名!=值]
		[名^=值]	[名$=值]	[名*=值]
	(4)表单元素选择器
		:text  :password  :radio  :checkbox
		:hidden	:file	
		:submit  :reset  :button	 :image
		:disabled  :enabled  :checked  :selected
	(5)基本过滤选择器
		:first  :last  :eq(i)  :gt(i)  :lt(i)
		:odd  :even  :not(s)
	(6)子元素过滤选择器
		:first-child  :last-child  :only-child
		:nth-child( i / even / odd / 3n+1 )
	(7)内容过滤选择器
	(8)可见性过滤选择器
操作元素的属性
操作元素的内容
操作元素的值
操作元素的样式
遍历元素
添加元素
删除元素
替换元素
克隆元素


今日目标
(1)补充选择器
(2)操作元素――重点
(3)增删替换元素――重点

1.查找元素――可见性过滤选择器
  :hidden 选中隐藏元素		:visible 选中可见元素
  
验证：下列哪些可被:hidden选中		
	(0)head/meta/script/title	可以
	(1)display:none			可以
	(2)<input type="hidden">	可以
	(3)opacity:0				不可以
	(4)visibility:hidden			不可以

2.查找元素――内容过滤选择器
  	:contains(txt)		:has(selector)
	:empty			:parent

  <div>
   <button>删除员工</button><button>添加员工</button>
   <button>删除部门</button><button>添加部门</button>
  </div>
   $('button:contains("员工")')....

3.操作元素的属性
  DOM：
	div.setAttribute('title', '新闻详情')
	var value = div.getAttribute('title')
  jQuery：
	$('div').attr('title','新闻详情')			//SET
	var value = $('div').attr('title')			//GET
  说明：二个参数是SET，一个参数是GET

  练习：鼠标悬停在小图上，就显示出对应的大图		10:58~11:10
  	
	$('img.thumbnail').mouseenter( fn )  读取小图的alt属性值，赋给大图的src属性
	
 
面试题：mouseover和mouseenter的区别



4.操作元素的内容
  DOM：
	tr.innerHTML = "<td>AA</td>"		
	var html = tr.innerHTML
	p.innerText = '<a>hello</a>'
	var text = p.innerText
  jQuery：
	$('tr').html('<td>AA</td>');		//SET
	var h = $('tr').html( );			//GET
	$('p').text('hello');				//SET
	var h = $('p'). text( );			//GET
  练习： <button>0</button>  点击一次，数字+1     11:30


5.操作元素的值
  提示： 只要表单元素才有值(value)
  DOM：
	input.value = '用户名'
	var v = input.value;
  jQuery：
	$('input').val('用户名')			//SET
	var v = $('input').val( )			//GET
  练习： 
  


5.操作元素的样式
  DOM：
	div.style.color = "#f00"
	var c = div.style.color
	div.className = 'btn  btn-danger  alert'
	var n = div.className
  jQuery：
	$('div').css('color', '#f00')		//SET
	var c = $('div').css('color')		//GET
	$('div').addClass('box')
	$('div').removeClass('alert')
	$('div').hasClass('alert')		
	$('div').toggleClass('box')		//切换，有则删除，无则添加

  练习：实现一个双态按钮组，每个按钮有两种状态（白底黑字、灰底白字）			div>button*4				14:35


6.遍历元素
  DOM：
	child.parentNode
	parent.childNodes
	div.nextSibling
	div.previousSibling
  jQuery：
	$('div').parent()
	$('div').children(selector)		//在直接子元素中查找
	$('div').find(selector)			//在所有子元素中查找
	$('div').next()					//下一个兄弟
	$('div').nextAll()				//后面所有的兄弟
	$('div').prev()					//前一个兄弟
	$('div').prevAll()				//前面所有的兄弟
	$('div').siblings(selector)			//所有的兄弟
	练习：实现手风琴组件，点击h3，显示/隐藏后面的p
	<div class="accordion">			
		<h3>西游记简介</h3>
		<p>lorem</p>
		<h3>水浒传简介</h3>
		<p>lorem</p>
		<h3>三国志简介</h3>
		<p>lorem</p>
	</div>

	练习：实现一个“胶囊式导航”组件	
	<ul class="nav-pills">
  		<li><a href="#">主页</a></li>
  		<li><a href="#">新闻</a></li>
  		<li class="active"><a href="#">产品</a></li>
</ul>


7.添加元素
  DOM：
	var p = document.createElement('p')
	p.setAttribute('id', 'p1');
	p.onclick = fn;
	div.appendChild( p );
  jQuery：
	$('div').append('<p id="p2">ABCD</p>');
	
var p = $('<p id="p2"><span>ABCD</span></p>');
	p.click(fn);
	$('div').append(p);		//追加为最后一个子元素
	$('div').prepend(p);		//追加为第一个子元素
  练习：点击按钮，生成一个随机的色块		16：50
	
8.删除元素
  DOM：
	parent.removeChild( child )
  jQuery：
	$('p').remove( );		//删除当前选定元素
	$('div').empty( );		//清空当前选定元素的内容
	$('div').html( "" );		//清空当前选定元素的内容

9.替换元素
DOM：
	parent.replaceChild(newChild, oldChild)
  jQuery：
	$('newChild').replaceAll( $('oldChild')/DOM/选择器 )		//返回新元素
	$('oldChild').replaceWith( $('newChild')/DOM/选择器 )		//返回旧元素
  练习：游戏中的英雄选择：点击下方英雄图片，则替换上方选择区域的英雄 
	


10.克隆元素
  DOM：
	var copy = div.cloneNode()
  jQuery：
	var copy = $('button').clone( false )		//只克隆元素
	var copy = $('button').clone( true )		//克隆元素以及其身上所有的监听函数


11.jQuery中的事件绑定函数
  面试题：下列jQuery中的函数有哪些区别？
  bind  on  live   delegate？
  
答案：jQuery的历史上先后出现了多个事件绑定函数：
  (1)bind & unbind
	用法： $('btn').bind( 'click', fn )
	对用的DOM操作：  btn.addEventListener('click', fn, false)
	练习： 创建一个只能点击一次的按钮，“加载更多”=>“加载中...”
  (2)one
	用法：$('btn').one( 'click', fn )
	含义：为元素绑定一个只能执行一次的监听函数
  (3)bind函数的简化版本，30+个， click/mouseover/keyup/....
	比如： $('btn').bind('mouseenter',fn) 
可以简化为$('btn').mouseenter(fn)
  (4)delegate
  (5)live
  (6)on


练习内容：jQueryDOM处理和事件绑定
(1)实现计算器界面和输入功能
  
(2)点击菜品，进行菜品选择

提示：给option添加双击事件处理函数






李文华
QQ: 2180265268






复习：
jQuery是一个JS函数库，100+函数，分为四组：
(1)DOM操作函数
(2)事件处理函数
(3)动画函数
(4)AJAX函数

DOM操作函数：
查找元素
	$()  jQuery()
操作元素的属性
	$(..).attr()
操作元素的内容
	$(..).html()	$(..).text()
操作元素的值
	$(..).val()
操作元素的样式
	$(..).css()
	$(..).addClass()  $(..).removeClass()
	$(..).hasClass()	  $(..).toggleClass()
遍历元素
	$(..).parent()	$(..).children()  $(..).find()
	$(..).next()  $(..).nextAll()
	$(..).prev()  $(..).prevAll()  $(..).siblings()
添加元素
	$(parent).append(child)
	$(child).appendTo(parent)
	$(parent').prepend(child)
$(child).prependTo(parent)
$(prev).after(next)
$(next).before(prev)
$(next).insertAfter(prev)
$(prev).insertBefore(next)
删除元素
	$(..).remove()		$(..).empty()
替换元素
	$(new).replaceAll(old)
	$(old).replaceWith(new)
克隆元素
	$(..).clone()
	$(..).clone(true)

面试题：jQuery中有哪些选择器是css中所没有的？http://api.jquery.com/category/selectors/jquery-selector-extensions/



今日目标：
(1)事件监听函数 ―― 重点
(2)动画函数 ―― 有意思，小重点
(3)高级动画效果(jQueryUI) ―― 更有意思

1. jQuery中的事件绑定函数（按历史出现顺序）
(1)bind & unbind
(2)one
(3)bind简化版本    bind('mouseenter',fn) => mouseenter(fn)
	注意：前面三类函数的共同问题：1)每个事件源都要绑定一次监听函数；2)绑定过程只对当前已经存在的元素有效。――解决办法：利用事件冒泡机制，把子元素的事件委托给父元素（或称为让父元素代理子元素的事件监听）
	(4)delegate & undelegate		
	   用法：$('div.parent').delegate('.numBtn', 'click', fn)
	   练习：使用事件代理为计算器上的按钮绑定监听函数
		
	   练习：点击按钮，在容器中添加一个span，单击此span，则删除自己。
	(5)live & die
	 作用：把所有子元素的事件委托给document对象，此方法已废弃
	(6)on & off
	 on可以取代前面所有的方法！ 
用法1：把监听函数直接绑定事件源上
	$('button').on('click', fn)			//bind/click
	 用法2：把监听函数委托给父元素
		$('div.parent').on('click', 'button', fn)	//delegate
	 练习：点击按钮，在容器中添加一个span，单击此span，则删除自己――所有事件绑定都使用on来实现


2.补充：有关事件的面试题
  面试题： window.onload和$(document).ready()的区别？
  二者表示的事件都在“页面加载完成”后执行。
  区别：
  (1) $(document).ready()底层的JS实现为：
	document.addEventListener('DOMContentLoaded', fn, false);
  (2)load事件和DOMContentLoaded事件的区别：
	load：待HTML、JS、CSS、图片等所有的页面资源加载完成时触发
	DOMContentLoaded：待DOM内容(HTML、JS)加载完成时触发，不等待CSS、图片等资源的加载
	$(document).ready()事件触发时机要早于window.onload
  (3) $(document).ready()可以先后绑定多次；window.onload只能绑定一次
  (4) $(document).ready(fn)可以简写为：
	$().ready(fn)  或者   $( fn )

前端实现动画的技术有哪些？
(1)CSS3 Transition
(2)CSS3 Keyframes
(3)JS 定时器：  setInterval 或 setTimeout 修改样式
  jQuery1&2
(4)requestAnimationFrame ―― 效率最高 
  jQuery3

3.jQuery提供的动画函数
  jQuery1.11.3动画函数底层都是定时器动画(setTimeout).
  注意：所有的jQuery动画函数都会自动排队！
  (1)隐藏和显示动画――修改width/height/opacity
	$(..).show(speed, fn)
	$(..).hide(speed, fn)
	$(..).toggle(speed, fn)
    练习：小星星图片，点击后，闪动3次  开始！
  (2)淡入/淡出动画――修改opacity
	$(..).fadeOut( )		//淡出
	$(..).fadeIn( )		//淡入
	$(..).fadeToggle( )
    练习：实现一个完整的标签页组件	14:29~14:39
	<div class="tabs">
		<ul>
			<li class="active"><a href="#tc10"></a></li>
			<li><a href="#tc20"></a></li>
			<li ><a href="#tc30"></a></li>
		</ul>
		<div class="tab active " id="tc10"></div>
		<div class="tab" id="tc20"></div>
		<div class="tab" id="tc30"></div>
	</div>
  (3)折叠展开/收起动画――修改的height
	$(..).slideUp( )
	$(..).slideDown( )
	$(..).slideToggle( )
	练习：实现一个完整版的手风琴
	<div class="accordion">
		<h3>西游记简介</h3>
		<div class="active">详情</div>
		<h3>三国志简介</h3>
		<div>详情</div>
		<h3>水浒传简介</h3>
		<div>详情</div>
	</div>
  (4)万能动画函数――修改任意合法的属性
	$(..).animate( {
		width: '300%',
		height: '30%',
		opacity: '0.6',
		left: '300px'
} , 1000, fn)
	注意：animate函数只能对数值型的属性执行定时器动画（如宽、高、透明度、位置...），非数值型属性不能执行动画（如display、border-style、text-decoration）；默认情况下，不能对颜色相关属性执行动画！
	练习：	
	(1)创建一个小星星，点击后，从屏幕左边移动到右边
	(2)创建一个小星星，点击后，从屏幕上边移动到下边
	(3)创建一个小星星，点击后，从屏幕左上角走斜线移动到右下角
	(4)创建一个小星星，点击后，从屏幕左边移动到右边，再移动到下边
	(5)创建满天随机小星星(大小和位置都随机)，点击一颗后，它变大变淡，最后从文档中消失 


4.jQueryUI
  User Interface，用户界面
  http://jqueryui.com/
  jQuery UI is a set of user interface interactions, effects, widgets, and themes built on top of the jQuery Library. 
  jQuery是一个JS函数库；jQueryUI基于jQuery，提供了几十个HTML UI组件。jQueryUI在下面三方面对jQuery进行了扩展：
  (1)Effects：动画特效
  (2)Interactions：交互组件
  (3)Widgets：小部件


5.jQueryUI ―― Effects
  jQueryUI为jQuery中的动画函数添加了更多特效，同时也支持了颜色渐变动画！
(1)$(..).animate({			//支持颜色渐变动画
		color: '#f00',
		backgroundColor: '#0f0',
		borderColor: '#00f'
}, 1000)
  (2)$(..).toggle('特效名称', 3000);				17:13~17:25
	特效名称包括：blind bounce clip drop explode fade fold highlight puff pulsate scale shake size slide
	练习：使用上述动画特效，明确其效果样式和中文含义

5.jQueryUI ―― Interactions
  用户交互组件：
  (1)draggable：可以拖动的元素			
	使用方法： $(..).draggable( );
	练习：实现一个可以随着鼠标拖动的小飞机
  (2)resizable：可以重设大小的元素      
	使用方法：$(..).resizable();
	练习：实现一个可以使用鼠标改变大小的小飞机


练习内容：jQuery DOM操作和事件监听
(1)把省和市的信息保存在数组中，使用jQuery中的DOM操作实现省/市联动下拉菜单
  

(2)购物车计算器：      
	
要求：(1)点击“添加商品”按钮后，可以在表格中显示一个新的商品，价格随机生成，数量随机生成(整数)，可以自动显示出“小计”；
	(2)“数量”显示在一个输入框中，只要用户的输入改变了，后续的“小计”随之改变；
	(3)只要“添加商品”、“删除商品”被点击，或者“数量”被改变，必须重新计算出“购物车总金额”。

复习：
jQuery是一个JS函数库，100+函数，分为四组：
(1)DOM操作
	查找元素		$()
	操作元素属性	attr()
	操作元素内容	html()	text()
	操作元素值	val()
	操作元素样式	css()  addClass()  removeClass()  hasClass()  toggleClass()
	遍历元素		parent()  children()  find()  next() nextAll() prev() prevAll() siblings()
	添加元素		append()  prepend()
	删除元素		remove()  empty()
	替换元素		replaceAll()  replaceWith
	克隆元素		clone()
(2)事件处理
	bind()
	one()
	click()/mouseenter()/hover(fn, fn)....
	delegate()
	on()
(3)动画
	show() / hide() / toggle()
	fadeOut() / fadeIn() / fadeToggle()
	slideDown() / slideUp() / slideToggle()
	animate({ }, speed, easing, fn)
(4)AJAX
主要目标简化DOM操作，屏蔽浏览器的兼容性。

jQueryUI是一个HTML组件库――


今日目标：
(1)类数组对象操作――掌握
(2)补充jQueryUI组件――了解
(3)自定义jQuery插件――重点
(4)第三方jQuery插件――掌握



1.操作jQuery类数组对象
  $(...)函数的返回值就是jQuery对象――类数组对象，其中封装着选中的DOM对象
  (1)length：返回封装的DOM对象的个数
  (2)[i]：返回封装的第i个DOM对象
  (3)get(i)：返回封装的第i个DOM对象
  (4)index(dom)：返回指定的DOM对象在当前类数组对象中的下标		
  (5)each(fn)：遍历类数组对象中的每个DOM元素，代替for循环   $('....').each( function(i, dom){} )

  练习：五个小星星，默认全是灰色，点击某个后前面的星星都变为红色――实现打分功能
  练习：ul>li*5，使用jQuery计算出上述5个成绩的总分和平均分，并输出

2.补充jQueryUI知识点
  jQueryUI是一个HTML组件库（js+css+img），分为三部分：
  (1)Effects：颜色动画、显隐特性
  (2)Interactions：交互组件
	1)draggable：可拖动的元素
	2)resizable：可改变大小的元素
	3)sortable：可排序的列表
		练习：创建可排序的人名列表(ol)
	4)selectable：可选择的列表
		练习：创建可以选中/多选的人名列表
  (3)Widgets：小部件
	1)accordion：手风琴组件
	  使用方法：   
HTML: div.parent > (h3/div)*3 
		JS: $('.parent').accordion()
	2)tabs：标签页组件
	  使用方法：
		HTML：div.parent > ul + div*3
		JS：$('.parent').tabs()
	3)datepicker：日期拾取器
	  使用方法：
		HTML： <input type="text">
		JS： $('input').datepicker()
	4)dialog：对话框组件
	  使用方法：
		HTML： <div title="对话框标题">
		JS：$('div').dialog()
   	5)tooltip：工具提示组件
	  使用方法：
		HTML：  <ANY title="提示文字的内容">
		JS： $(document).tooltip()
	6)autocomplete：自动完成、搜索提示组件
	  使用方法：	
		HTML： <input>
		JS：$('input').autocomplete( {
				source:  ['','','','','']
} )
	  练习：实现一个菜品名称搜索提示效果	

3.jQuery插件 ―― 重点
  插件：Plugin，基于一个现有的功能部件/平台，添加更多的功能（如函数、对象等）――这种扩展的功能就称为“插件”
	
  jQuery插件函数：就是利用原生JS或jQuery提供100+函数，进一步的开发扩展的函数。分类两种类型：
  (1)jQuery全局插件函数：
	JS中，全局函数会造成全局对象的污染！为了避免污染，可以把这些全局函数声明在jQuery名下――这些函数与jQuery并没有必然的联系。
	声明方式： jQuery.fnName = function(arr/sts/num){}
	调用方式： jQuery.fnName([]/''/0);
  (2)jQuery对象插件函数：
	$()函数的返回是一个jQuery对象――类数组对象，其中封装着选中的DOM对象，对这些DOM对象进行操作的扩展函数，称为“jQuery对象插件函数”。
	声明方式： 把扩展函数声明为jQuery对象的原型(即jQuery.fn)身上：  jQuery.fn.avg = function(){ }
调用方法： $('li').avg()	$('td').max()	$('p.num').min()

练习：创建一个myFnLib.js,里边创建一个函数avg，接收一个数组作形参，返回这个数组所有数字的平均值；创建一个函数max，接收一个数组作形参，返回这个数组所有数字中的最大值；创建一个函数min，接收一个数组作形参，返回这个数组所有数字中的最小值。编写一个HTML文件，调用上述js文件中的三个函数。   14:45	

练习：编写一个自己的手风琴函数  调用方法：$('div').accordion()
练习：编写一个自己的标签页插件函数
使用方法：
		HTML：div.parent > ul + div*3
		JS：$('.parent').tabs()
面试题： jQuery中的两个each函数的区别？
$.each(arr, function(i,v){})： jQuery全局函数，遍历指定数组中的每个元素
$(..).each(function(i,dom){})：jQuery对象函数，遍历封装的每个DOM对象
















