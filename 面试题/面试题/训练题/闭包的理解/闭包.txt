1.实现space函数，接收一个字符串为参数，然后把这个字符串都用空格隔开返回
	function spacify(str){
	    return str.split("").join("");
	}
console.log(spaceify('hello world'))   h e l l o w o r l d
2.请将上面方法实现成这样

'hello world'.spacify();

String.prototype.spacify=function(){
            return this.split("").join("");
        }
    console.log('hello     world'.spacify());

3.简单的解释下函数表达式(expression)和函数声明(declaration)的区别 比如var too=function(){}  function too(){}  （选做下）
var too=function(){alert(1)}  
function too(){alert(2)} 
too();//1
前者var too提前，后者function too(){alert(2)}提前，只能输出alert(1)

区别：1.函数表达式只是引用
      2.函数声明可以可以保存变量，会造成污染


4.定义一个log函数，可以在控制台输出
	function log(msg){
	   console.log(msg);
	}
5.进一步完善该函数，可以传多个参数，类似与console.log(str,str……);
	function log(){
var str="";
        for(var i= 0;i<arguments.length;i++) {
            str += arguments[i].split("").join("")+" ";
        }
        return str;
	}

6.进一步完善该函数，在每个参数输出的时候，添加一个"(好好学习)-"的前缀，例如  "(好好学习)-hellow  (好好学习)-world
	function log(){
 var str="";
        for(var i= 0;i<arguments.length;i++) {
            str += "(好好学习)-"+arguments[i].split("").join("")+" ";
        }
        return str;
	}
	
7.考查上下文，content和this
 	var User={
		num:1，
		getCount:function(){
			return this.num;
		}
	}
console.log(User.getCount());//1
var fn=User.getCount;
console.log(fn());//undefined
分别输出什么

怎么让2次输出都是1；
var fn=User.getCount();

8.解释下事件代理。（可以用代码实现）
<div id="div">
    <button>123</button>
    <button>123</button>
    <button>123</button>
    <button>123</button>
    <button>123</button>
    <button>123</button>
</div>
<script>
   document.querySelector("#div").addEventListener("click",function(e){
       if(e.target.nodeName.toUpperCase()=="BUTTON"){
           this.removeChild(e.target);
       }
   });
</script>

9.解释下javascript的原型继承（选做下）


10.请写出原生bind()的兼容方法，兼容老IE


11.模拟实现jQuery的链式操作 就是方法执行完成还能继续执行方法      .addClass().show().hide()  


12.为 Array 对象添加一个去除重复项的方法   uniq()
//console.log([false, true, undefined, null, NaN, 0, 1, {}, {}, 'a', 'a', NaN].uniq());
//[false, true, undefined, null, NaN, 0, 1, {}, {}, 'a']


13.转化颜色代码
function toRgb(color){

}

console.log(toRGB("#0000FF"));          // 输出 rgb(0, 0, 255)
console.log(toRGB("invalid"));          // 输出 invalid
console.log(toRGB("#A00"));              // 输出 rgb(170, 0, 0)

14.解释下JavaScript中this是如何工作的。

var o = {
    user:"追梦子",
    fn:function(){
        console.log(this.user);
    }
}
window.o.fn(); //输出什么"追梦子"

var o = {
    a:10,
    b:{
        a:12,
        fn:function(){
            console.log(this.a); 
        }
    }
}
o.b.fn();//输出什么12

var o = {
    a:10,
    b:{
        a:12,
        fn:function(){
            console.log(this.a); 
            console.log(this); 
        }
    }
}
var j = o.b.fn;
j();  //输出什么undefined Window
原因是j()中对象是document


function fn()  
{  
    this.user = '追梦子';//this->window  
    return {}; //返回空对象 
}
var a = new fn;  
console.log(a.user); //输出什么undefined  


function fn()  
{  
    this.user = '追梦子';  
    return 1;//返回fn {user: "追梦子"}
}
var a = new fn;  
console.log(a.user); //输出什么追梦子


15.什么是闭包，如何使用它，为什么要使用它？
闭包就是能够读取其他函数内部变量的函数。由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成“定义在一个函数内部的函数”。

所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。

使用闭包的注意点：

由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。
闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。
