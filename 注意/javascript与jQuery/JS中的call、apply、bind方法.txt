JS中的call、apply、bind方法
时间 2015-06-27 23:40:00  博客园-原创精华区
原文  http://www.cnblogs.com/jingwhale/p/4604917.html
主题 JavaScript
JS中的call、apply、bind方法

一、call()和apply()方法

1.方法定义

call方法:

语法：call([thisObj[,arg1[, arg2[,   [,.argN]]]]])

定义：调用一个对象的一个方法，以另一个对象替换当前对象。

说明：

call 方法可以用来代替另一个对象调用一个方法。call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。

如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj。

apply方法：

语法：apply([thisObj[,argArray]])

定义：应用某一对象的一个方法，用另一个对象替换当前对象。

说明：

如果 argArray 不是一个有效的数组或者不是 arguments 对象，那么将导致一个 TypeError。

如果没有提供 argArray 和 thisObj 任何一个参数，那么 Global 对象将被用作 thisObj， 并且无法被传递任何参数。

2、常用实例

a、

function add(a,b)  
{  
  alert(a+b);  
}  
function sub(a,b)  
{  
  alert(a-b);  
}  
add.call(sub,3,1);
这个例子中的意思就是用 add 来替换 sub，add.call(sub,3,1) == add(3,1) ，所以运行结果为：alert(4); // 注意：js 中的函数其实是对象，函数名是对 Function 对象的引用。

b、

function Animal(){	
  this.name = "Animal";	
  this.showName = function(){	
    alert(this.name);	
  }	
}	
function Cat(){	
  this.name = "Cat";	
}	
var animal = new Animal();	
var cat = new Cat();
通过call或apply方法，将原本属于Animal对象的showName()方法交给对象cat来使用了。

//输入结果为"Cat"   

animal.showName.call(cat,",");   

//animal.showName.apply(cat,[]); 

call 的意思是把 animal 的方法放到cat上执行，原来cat是没有showName() 方法，现在是把animal 的showName()方法放到 cat上来执行，所以this.name 应该是 Cat。

c、实现继承

function Animal(name){	  
  this.name = name;	  
  this.showName = function(){	  
    alert(this.name);	  
  }	  
}	  
function Cat(name){	
  Animal.call(this, name);	
}	  
var cat = new Cat("Black Cat");	 
cat.showName();
Animal.call(this) 的意思就是使用 Animal对象代替this对象，那么 Cat中不就有Animal的所有属性和方法了吗，Cat对象就能够直接调用Animal的方法以及属性了.

d、多重继承

function Class10()  
{  
  this.showSub = function(a,b)  
  {  
    alert(a-b);  
  }  
}  
function Class11()  
{  
  this.showAdd = function(a,b)  
  {  
    alert(a+b);  
  }  
}  
function Class2()  
{  
  Class10.call(this);  
  Class11.call(this);  
}
很简单，使用两个 call 就实现多重继承了当然，js的继承还有其他方法，例如使用原型链，这个不属于本文的范畴，只是在此说明call 的用法。说了call ，当然还有 apply，这两个方法基本上是一个意思，区别在于 call 的第二个参数可以是任意类型，而apply的第二个参数必须是数组，也可以是arguments。代码如下：

var func=new function(){this.a="func"} 
var myfunc=function(x,y){ 
var a="myfunc"; 
alert(this.a); 
alert(x + y); 
} 
myfunc.call(func,"var"," fun");// "func" "var fun" 
myfunc.apply(func,["var"," fun"]);// "func" "var fun"
二、bind

在EcmaScript5中扩展了叫bind的方法（IE6,7,8不支持），使用方法如下

function T(c) {
  this.id = "Object";
  this.dom = document.getElementById("scroll");
}
T.prototype = {
  init: function() {
     //①
    this.dom.onmouseover = function() {
      console.log("Over-->"+this.id);
    }
     //②
    this.dom.onmouseout = function() {
      console.log("Out -->"+this.id);
    } .bind(this)
  }
};
(new T()).init();
结果：

通过①和②的对照加上显示的结果就会看出bind的作用：改变了上下文的this

bind与call很相似,，例如，可接受的参数都分为两部分，且第一个参数都是作为执行时函数上下文中的this的对象。

不同点有两个：

①bind的返回值是函数

//都是将obj作为上下文的this

function func(name,id) {
    console.log(name,id,this);
}
var obj = "Look here";
//什么也不加func("    ","-->");

//使用bind是 返回改变上下文this后的函数

var a = func.bind(obj, "bind", "-->");

a();

//使用call是 改变上下文this并执行函数

var b = func.call(obj, "call", "-->");

结果：

image
②后面的参数的使用也有区别

function f(a,b,c){
    console.log(a,b,c);
}

var f_Extend = f.bind(null,"extend_A")
f("A","B","C")  //这里会输出--> A B C

f_Extend("A","B","C")  //这里会输出--> extend_A A B

f_Extend("B","C")  //这里会输出--> extend_A B C

f.call(null,"extend_A") //这里会输出--> extend_A undefined undefined

call 是 把第二个及以后的参数作为f方法的实参传进去

而bind 虽说也是获取第二个及以后的参数用于之后方法的执行，但是f_Extend中传入的实参则是在bind中传入参数的基础上往后排的。

//这句代码相当于以下的操作

var f_Extend = f.bind(null,"extend_A")

//↓↓↓

var f_Extend = function(b,c){
    return f.call(null,"extend_A",b,c);
}
举一个应用场景：例如现在有一个方法 根据不同的文件类型进行相应的处理，通过bind 就可以创建出简化版的处理方法

function FileDealFunc(type,url,callback){
  if(type=="txt"){...}
  else if(type=="xml"){...}
  .....
}
var TxtDealFunc = FileDealFunc.bind(this,"txt");
//这样使用的时候更方便一些

FileDealFunc("txt",XXURL,func);  //原来

TxtDealFunc(XXURL,func); //现在

以下是兼容处理

if (!Function.prototype.bind) {
    Function.prototype.bind = function(obj) {
        var _self = this
            ,args = arguments;
        return function() {
            _self.apply(obj, Array.prototype.slice.call(args, 1));
        }
    }
}

针对li元素的克隆：
<script>
var htm=$("ul.list2 li").eq(0).clone();
  $("ul.list2 li").eq(0).after(htm);
</script>

相对定位与绝对定位要连起来使用，但是要少用，会对后期js的增删添加有所影响

div的多层叠加有助于解决页面中各种效果调试

ul li中尽量只放li

this指的是当前对象，有助于解决增删当前元素的问题

输入字符，如果你返回的是其length，它不会输出px，只会输出字符个数

动态添加元素，最好先写好每种要用到的元素样式，不显示的放在外部样式表中，在增加是在循环添加

change是jQuery中针对textarea/select在元素值发生变化时，运行函数的函数

URL中相对地址和绝对地址的关系，前者依赖后者，以<base>标签来定义绝对地址

jQuery中动态添加元素的方法：
1.只支持一个元素的：
 //创建满天随机小星星(大小和位置都随机)，点击一
  //颗后，它变大变淡，最后从文档中消失
  for(var i=0; i<15; i++){
    $('<img src="img/star.png">').css('width',rn	(30,300)+'px').css('left', rn(0, 600)+'px').css('top', 	rn(0, 600)+'px').appendTo(document.body);
  }
2.支持多元素，复杂层次关系的：
var tr1='<tr><td>'+prise+'</td><td><input type="number" value="'+num+'"></td><td>$<b>'+smallTt+'</b></td><td><span>&times;<span></td></tr>';

对CSS中box-sizing的理解：
该属性有三个值
content-box(默认):显示出来的有背景色的宽高是border+padding+width/height 例如三者分贝为1px 20px 100px 则显示出来的宽度为142px
border-box:显示出来的有背景色的宽高是width/height，它也有border和padding，不过两者都包含在width/height中 例如三者分贝为1px 20px 100px 则显示出来的宽度为100px，在网页上看时，100px的原始宽已经变成了58px了

字符串中数字直接遇到/*-，会强制转换
“1”-1=0
“55”/5=10

单选题)有 html 代码如下： <body> <p id="p1">回复<a>10</a></p> </body> 还有 JavaScript 代码如下： 
var p = document.getElementById('p1'); 
console.log(p.firstChild.innerHTML); 
console.log(p.firstElementChild.innerHTML); 上述代码的输出结果是（undefined,10）
p.firstChild =>“回复” p.firstChild.innerHTML =>undefined

arr[4].toString()数组转字符串










bind call apply的区别
call 将前面的对象的方法属性赋予后者，第二个参数是对象

apply 将前面的对象的方法与属性赋予后者，第二个参数是数组

bind 将后面的对象方法属性赋予前者，一般不带参数
