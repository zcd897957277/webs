addEventListener 有三个参数：第一个参数表示事件名称（不含 on，如 "click"）；第二个参数表示要接收事件处理的函数；第三个参数为 useCapture，本文就讲解它。


复制代码 代码如下:


 <div id="outDiv">
   <div id="middleDiv">
     <div id="inDiv">请在此点击鼠标。</div>
   </div>
 </div>
 <div id="info"></div>




复制代码 代码如下:


var outDiv = document.getElementById("outDiv");
 var middleDiv = document.getElementById("middleDiv");
 var inDiv = document.getElementById("inDiv");
 var info = document.getElementById("info");
 outDiv.addEventListener("click", function () { info.innerHTML += "outDiv" + "<br>"; }, false);
 middleDiv.addEventListener("click", function () { info.innerHTML += "middleDiv" + "<br>"; }, false);
 inDiv.addEventListener("click", function () { info.innerHTML += "inDiv" + "<br>"; }, false);



上述是我们测试的代码，根据 info 的显示来确定触发的顺序，有三个 addEventListener，而 useCapture 可选值为 true 和 false，所以 2*2*2，可以得出 8 段不同的程序。

?全为 false 时，触发顺序为：inDiv、middleDiv、outDiv；
?全为 true 时，触发顺序为：outDiv、middleDiv、inDiv；
?outDiv 为 true，其他为 false 时，触发顺序为：outDiv、inDiv、middleDiv；
?middleDiv 为 true，其他为 false 时，触发顺序为：middleDiv、inDiv、outDiv；
?……


最终得出如下结论：

?true 的触发顺序总是在 false 之前；
?如果多个均为 true，则外层的触发先于内层；
?如果多个均为 false，则内层的触发先于外层。
